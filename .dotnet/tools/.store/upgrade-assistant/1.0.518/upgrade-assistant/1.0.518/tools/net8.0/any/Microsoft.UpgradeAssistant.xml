<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.UpgradeAssistant</name>
    </assembly>
    <members>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
                Reserved to be used by the compiler for tracking metadata.
                This class should not be used by developers in source code.
            </summary>
            <remarks>
                This definition is provided by the <i>IsExternalInit</i> NuGet package (https://www.nuget.org/packages/IsExternalInit).
                Please see https://github.com/manuelroemer/IsExternalInit for more information.
            </remarks>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Configuration.LocalizedRuleConfig.Id">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Configuration.LocalizedRuleConfig.Description">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Configuration.LocalizedRuleConfig.Label">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Configuration.LocalizedRuleConfig.Links">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Analysis.ProgressTracker.StartAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Analysis.ProgressTracker.CompleteAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Analysis.ProjectAnalysis.GetEntryRelativePath(Microsoft.UpgradeAssistant.Analysis.AnalysisEntry)">
            <summary>
            Project analysis is used in VS and CLI. When we are in VS we always have a solution folder provided to the ctor.
            When we are in CLI we don't have solution folder, only project files paths. In that case to make project paths relative,
            we try to find closest solution file to a given project (it could be a little unprecise if user has many sln files in one
            folder or some other sln files in subfolders, but its rare and user would know where to locate project file anyway, main
            goal is make it relative and not expose local paths).
            After we found a solution folder for one of the projects we cache it and try to use for other projects. If other projects
            are not located in that subfolder, we try to find another solution file for them.
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Analysis.Rules.DefaultRuleConfigLocator">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Analysis.Rules.DefaultRuleConfigLocator.GetRuleConfigsContent">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Rules.IRule.Id">
            <summary>
            Unique ID of the rule. Consists of category and rule name separated by dot.
            Rule Name is usually an integer number.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Rules.IRule.Category">
            <summary>
            Category describes a feature to which the rule is related to
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Rules.IRule.Description">
            <summary>
            Formal description of the rule.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Rules.IRule.Label">
            <summary>
            Short description.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Rules.IRule.Prompt">
            <summary>
            Optional prompt that could be used to ask LLMs about steps to resolve instances of this rule.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Rules.IRule.Severity">
            <summary>
            Severity of the rule that suggest how important it is to fix the issue.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Rules.IRule.Effort">
            <summary>
            Contains a score for the rule that suggests how much effort is required to fix the issue.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Rules.IRule.Links">
            <summary>
            Links to official documentation of the rule.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Rules.IRuleAnalyzer.Id">
            <summary>
            Unique analyzer ID. Usually it is the same as rule ID.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Rules.IRuleAnalyzer.RuleId">
            <summary>
            Unique ID of the rule. Consists of category and rule name separated by dot.
            Rule Name is usually an integer number.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Rules.IRuleAnalyzer.Kind">
            <summary>
            Kind of teh rule. Rule fo specific kind could have different additional properties.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Rules.IRuleAnalyzer.Snippet">
            <summary>
            TODO see if this snippet even needed and if yes, should analyzer contain it or rule?
            Sample code snippet that demonstrates the rule. It is optional and could contain any markup not necessarily code.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Rules.IRuleAnalyzer.Traits">
            <summary>
            Set of traits that suggest the context when rule should be applied.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Analysis.Rules.IRuleConfigLocator">
            <summary>
            Returns *.rule.json file paths.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Analysis.Rules.IRuleProvider">
            <summary>
            Returns all applicable rules for given context.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Analysis.Rules.IRuleProvider.GetRules(Microsoft.UpgradeAssistant.Traits.ITraitsSet,Microsoft.UpgradeAssistant.Operations.RunConfig,System.Threading.CancellationToken)">
            <summary>
            Returns all applicable rules for given context (traits).
            Note: if we ever need async logic to discover rules the host should asynchronously initialize IRuleProvider when loaded.
            GetRules should be synchronous for DiagnosticAnalyzer to work.
            </summary>
            <param name="traits"></param>
            <param name="config">Optional config that can provide more rules or override existing ones.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Analysis.Rules.IRuleSnippetFactory">
            <summary>
            This interface is used as a point to add extension methods that help to build instances of <see cref="T:Microsoft.UpgradeAssistant.Analysis.Rules.RuleSnippet"/>
            from different data. This way we only(!) create snippets using extension methods in this factory and it helps
            to control what information is added to the snippet for different privacy modes.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Analysis.Rules.LocationKind">
            <summary>
            Kind of location for a rule instance to occur: file, package, reference etc.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Analysis.Rules.Locations.BinaryRuleInstanceLocation">
            <summary>
            Code/API location in a binary file.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Analysis.Rules.Locations.CodeRuleInstanceLocation">
            <summary>
            Code location in a source file.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Analysis.Rules.Locations.NuGetRuleInstanceLocation">
            <summary>
            NuGet package incident location in a project.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Analysis.Rules.Locations.SettingRuleInstanceLocation">
            <summary>
            Setting location in a config file.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Analysis.Rules.PrivacyMode">
             <summary>
             Privacy mode specifies how much user data could be added to analysis reports when they are being exported.
            
             User data could be included in the snippets displayed in the rule incident details:
                 - code incidents would contain parent statements of nodes that were discovered by analyzers and
                   could accidentally capture sensitive data like passwords. For some users even the code statements
                   themselves are sensitive.
                 - configs and settings snippets could also contains sensitive data (like connection strings info).
            
             By default we are in Restricted mode which means - no snippets at all added to incidents.
            
             Protected mode means we could add non-user but the statements that were searched by rule analyzers:
                 - document comment IDs (signatures of methods, types) of code we are trying to find, which is .NET
                   objects signatures (not user's code).
                 - section/element names for configs and settings without actual attributes that contain all data.
                 
             Unrestricted mode means we could add all data that we can and it is the most useful mode that should be
             used only by users who has access to the code and this data is available to them anyway (the report is
             just more helpful for them in this case)
             </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Rules.Report.LocationConfig.PrivacyMode">
            <summary>
            Since we are serializing whole object we will set this property before serializing and pass to RuleSnippet 
            to return correct snippets based on mode. This would let us avoid cloning whole config.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Rules.Report.RuleInstanceConfig.State">
            <summary>
            State of the rule. Could be Active, Resolved or NotApplicable and we would
            allow users to change it in the report to track their progress.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Analysis.Rules.Report.RuleInstanceStateChangedEventArgs">
            <summary>
            Sent when state of some <see cref="T:Microsoft.UpgradeAssistant.Analysis.Rules.Report.RuleInstanceConfig"/> changes. If the instance is null, it means
            whole report was saved and all instances are now clean.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Rules.Rule.Id">
            <inheritdoc />
        </member>
        <member name="F:Microsoft.UpgradeAssistant.Analysis.Rules.Rule._category">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Rules.Rule.Description">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Rules.Rule.Label">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Rules.Rule.Prompt">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Rules.Rule.Severity">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Rules.Rule.Effort">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Rules.Rule.Links">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Rules.RuleAnalyzer.RuleId">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Rules.RuleAnalyzer.Id">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Rules.RuleAnalyzer.Kind">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Rules.RuleAnalyzer.Snippet">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Rules.RuleAnalyzer.Traits">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Rules.RuleAnalyzer.Enabled">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Analysis.Rules.RuleConfigDefinition">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Analysis.Rules.RuleConfigLocatorBase">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Analysis.Rules.RuleEffort">
             <summary>
             Using story points measure from WindUp, which is a modified fibonacci sequence.
            
             Here are some high-level guidelines:
                 - Trivial: The migration is a trivial change or a simple library swap with no or minimal API changes.
                 - Complex: The changes required for the migration task are complex, but have a documented solution.
                 - Redesign: The migration task requires a redesign or a complete library change, with significant API changes.
                 - Architectural: The migration requires a complete re-architecture of the component or subsystem.
                 - Unknown: The migration solution is not known and may need a complete rewrite.
            
             Effort points are aggregated for project/component/report and can provide some effort level insights.
             They are not exactly suggest how many man hours are required to complete the migration though.
             </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Rules.RuleFactoryAttribute.RuleKind">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Rules.IRuleFactoryMetadata.RuleKind">
            <summary>
            Specifies a kind of <see cref="T:Microsoft.UpgradeAssistant.Analysis.Rules.IRule"/> for which this factory is applicable.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Analysis.Rules.RuleIndex`1">
            <summary>
            Provides index for quick check if code piece even could have some matching rule.
            This helps with quickly filtering out code places that we should not analyze if there
            are no rules (analysis includes symbols check etc and if we can quit early we should).
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Analysis.Rules.RuleInstance">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Rules.RuleInstance.Rule">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Rules.RuleInstance.Description">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Rules.RuleInstance.Location">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Analysis.Rules.RuleInstanceLocation">
            <summary>
            Most locations are files, however there could be some "virtual" locations like some settings
            in project, binary, or remote settings to be tweaked by a user.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Analysis.Rules.RuleProvider">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Analysis.Rules.RuleProvider.GetRules(Microsoft.UpgradeAssistant.Traits.ITraitsSet,Microsoft.UpgradeAssistant.Operations.RunConfig,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Analysis.Rules.RuleSnippet.GetUnrestrictedSnippet(System.Nullable{Microsoft.UpgradeAssistant.Analysis.Rules.PrivacyMode})">
            <summary>
            When exported there is only one value for snippet and depending on the mode, 
            we return corresponding value for the snippet. The most informational value is Unrestricted
            and we use it to pass to Snippet field. 
            </summary>
            <param name="privacyMode"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Analysis.Rules.RuleSnippet.GetProtectedSnippet(System.Nullable{Microsoft.UpgradeAssistant.Analysis.Rules.PrivacyMode})">
            <summary>
            When exported there is only one value for snippet and if we are in any other mode
            other than Unrestricted, there is no need in separate Protected value, since its either
            equal to the value we passed for snippet already or should be null on most restricted case.
            </summary>
            <param name="privacyMode"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Analysis.Rules.RuleSnippetFactory">
            <summary>
            Implements interface that is used as a point to add extension methods that help to build instances of <see cref="T:Microsoft.UpgradeAssistant.Analysis.Rules.RuleSnippet"/>
            from different data. This way we only(!) create snippets using extension methods in this factory and it helps
            to control what information is added to the snippet for different privacy modes.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Serializers.CsvProjectAnalysisReportSerializer.Id">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Serializers.CsvProjectAnalysisReportSerializer.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Serializers.CsvProjectAnalysisReportSerializer.Order">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Analysis.Serializers.CsvProjectAnalysisReportSerializer.TryGetPath(System.String,System.String,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Analysis.Serializers.CsvProjectAnalysisReportSerializer.SerializeAsync(System.String,Microsoft.UpgradeAssistant.Analysis.Rules.Report.ReportConfig,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Analysis.Serializers.CsvProjectAnalysisReportSerializer.DeserializeAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Serializers.HtmlProjectAnalysisReportSerializer.Id">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Serializers.HtmlProjectAnalysisReportSerializer.Order">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Analysis.Serializers.HtmlProjectAnalysisReportSerializer.SerializeAsync(System.String,Microsoft.UpgradeAssistant.Analysis.Rules.Report.ReportConfig,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Analysis.Serializers.HtmlProjectAnalysisReportSerializer.DeserializeAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Analysis.Serializers.IReportSerializer.SerializeAsync(System.String,Microsoft.UpgradeAssistant.Analysis.Rules.Report.ReportConfig,System.Threading.CancellationToken)">
            <summary>
            If path is null, we expect serializer to ask where to serialize.
            We do delegate it to serializer since we don't know if it would
            serialize into one file or a folder with many files.
            </summary>
            <param name="path"></param>
            <param name="report"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Serializers.JsonProjectAnalysisReportSerializer.Id">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Serializers.JsonProjectAnalysisReportSerializer.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Serializers.JsonProjectAnalysisReportSerializer.Order">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Analysis.Serializers.JsonProjectAnalysisReportSerializer.TryGetPath(System.String,System.String,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Analysis.Serializers.JsonProjectAnalysisReportSerializer.SerializeAsync(System.String,Microsoft.UpgradeAssistant.Analysis.Rules.Report.ReportConfig,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Analysis.Serializers.JsonProjectAnalysisReportSerializer.DeserializeAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Analysis.Serializers.ReportSerializerAttribute">
            <summary>
            Attribute that is applicable for implementations of <see cref="T:Microsoft.UpgradeAssistant.Analysis.Serializers.IReportSerializer"/>.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Serializers.ReportSerializerAttribute.Kind">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Serializers.ReportSerializerAttribute.Order">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Analysis.Serializers.IReportSerializerMetadata.Kind">
            <summary>
            Unique serializer format kind
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Code.ApiMapEntry.Scenario">
            <summary>
            Empty or null scenario means this entry should be used for default application by transformers when traits are matching.
            If scenario is not empty, it means there is a specific transformer(s) that need it and will apply in some special way.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Code.ApiMapEntry.IsExtension">
            <summary>
             Gets or sets whether the API represents an extension method.
            </summary>
            <remarks>
             Although extension methods can only be static, this setting is disconnected from <see cref="P:Microsoft.UpgradeAssistant.Code.ApiMapEntry.IsStatic"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Code.ApiMapProviderAttribute">
            <summary>
            Attribute that is applicable for implementations of <see cref="T:Microsoft.UpgradeAssistant.Code.IApiMapProvider"/> and
            specifies when and how the ApiMap provider should be applied.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Code.ApiMapProviderAttribute.Traits">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Code.ApiMapProviderAttribute.Order">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Code.IApiMapProvider">
            <summary>
            Contract that can returns ApiMap entries specific to some trait
            expression specified in the attribute registering this contract.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Code.IApiMapProvider.GetApiMapEntriesAsync(System.Threading.CancellationToken)">
            <summary>
            Returns ApiMap entries specific for this provider.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Code.IApiMapProviderMetadata.Traits">
            <summary>
            A capabilities expression to use when decision is made to use the provider or not for
            current project context. When null, applied for all projects.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Code.MemberMap.GetExtensionMethod(System.String)">
            <summary>
             Looks up the extension method member by its simple name (i.e., 'X' from 'a.b.c.d.X').
            </summary>
            <param name="fullMemberName"></param>
            <returns>
             The single extension method member, if found; <see langword="null"/> otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Code.UpgradeFrameworkApiMapProvider">
            <summary>
            ApiMap entries applicable to target framework upgrade operations.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Code.UpgradeFrameworkApiMapProvider.GetApiMapEntriesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.ContextBase">
            <summary>
            Base context for a <see cref="T:Microsoft.UpgradeAssistant.Slice"/> object. 
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.ContextBase.Properties">
            <summary>
             Gets arbitrary properties that <see cref="T:Microsoft.UpgradeAssistant.Nodes.ISliceNodeProvider"/> or other contracts could cache
             for the associated <see cref="T:Microsoft.UpgradeAssistant.Slice"/>. 
            </summary>
            <remarks>
             It is not synchronized and owners of the data are responsible to check for data availability.
            </remarks>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.ClassDeclarationSyntaxExtensions.IsBasedOn(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax,System.String)">
            <summary>
            Returns true if class syntax node is based on type node with specified simple name
            (we cannot reliably compare full names for SyntaxNodes, we use symbols for full types.
            </summary>
            <param name="classNode"></param>
            <param name="baseTypeSimpleName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.DictionaryExtensions.ToDictionaryOfType``1(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.StringComparer)">
            <summary>
             Creates a new mutable dictionary from the supplied dictionary.
            </summary>
            <exception cref="T:System.InvalidOperationException">An item is found on the original dictionary that is not of type <typeparamref name="T"/></exception>.
        </member>
        <member name="M:Microsoft.UpgradeAssistant.DictionaryExtensions.ToReadOnlyDictionary``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Converts an IDictionary{TKey, TValue} to an IReadOnlyDictionary{TKey, TValue}. If the original dictionary instance implements IReadOnlyDictionary{TKey, TValue},
            the original instance will be returned, otherwise the dictionary will be cloned, using either the specified key equality comparer or the default if none was specified.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary</typeparam>
            <typeparam name="TValue">The type of values in the dictionary</typeparam>
            <param name="original">The dictionary to convert</param>
            <param name="comparer">(Optional) The custom comparer to use if the dictionary needs to be reconstructed</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.EnvironmentExtensions.GetProgramFilesPath(Microsoft.UpgradeAssistant.Services.IEnvironmentService)">
            <summary>
            Used to get the actual Program Files folder, regardless of process bitness
            On 32-bit Operating Systems, this will return C:\Program Files
            On 64-bit Operating Systems - regardless of process bitness, this will return C:\Program Files
            </summary>
            <returns>The Path of the Program Files folder</returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.EnvironmentExtensions.GetUpgradeAssistantAppDataPath(Microsoft.UpgradeAssistant.Services.IEnvironmentService)">
            <summary>
            Returns path to UA cache folder under %LocalAppData% on windows machines and /usr/local/share on others.
            </summary>
            <param name="environment"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.MetadataReaderExtensions.GetStringAttributeArgumentValue(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.CustomAttribute,System.String@)">
            <summary>
            Gets the string argument value of an attribute with a single fixed string argument.
            Note: Taken from https://github.com/dotnet/runtime/blob/3c381894b737bb1a56a21f16d0710a0c61908a1a/src/libraries/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.Unix.cs#L288
            </summary>
            <param name="reader">The metadata reader.</param>
            <param name="attr">The attribute.</param>
            <param name="value">The value parsed from the attribute, if it could be retrieved; otherwise, the value is left unmodified.</param>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.SliceContextExtensions.GetRandomPort(Microsoft.UpgradeAssistant.SliceContext,System.UInt16,System.UInt16)">
            <summary>
            Returns a random free port from given range taking into account all forbidden/used ports in current context.
            </summary>
            <param name="context"></param>
            <param name="rangeStart"></param>
            <param name="rangeEnd"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.SliceContextExtensions.AddForbiddenPorts(Microsoft.UpgradeAssistant.SliceContext,System.Nullable{System.UInt16}[])">
            <summary>
            Adds given ports to the set of forbidden/used ports for current context.
            </summary>
            <param name="context"></param>
            <param name="ports"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.SliceContextExtensions.GetForbiddenPorts(Microsoft.UpgradeAssistant.SliceContext)">
            <summary>
            Returns all forbidden/used ports in the current context.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.SliceTreeExtensions.Visit(Microsoft.UpgradeAssistant.SliceTree,System.Action{Microsoft.UpgradeAssistant.SliceTree},System.Boolean)">
            <summary>
            Recursively visits provided <see cref="T:Microsoft.UpgradeAssistant.SliceTree"/> children and calls provided delegate on each of them.
            </summary>
            <param name="tree"></param>
            <param name="visit"></param>
            <param name="recursive"></param>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.SolutionExtensions.GetProjectFlavorGuid(Microsoft.UpgradeAssistant.Services.ISolution,System.String,Microsoft.UpgradeAssistant.Services.IFileSystem)">
            <summary>
            Returns project flavor Guid from .sln file.
            </summary>
            <param name="solution"></param>
            <param name="projectId"></param>
            <param name="fileSystem"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.SolutionExtensions.HasClassicCSharpProjectGuid(Microsoft.UpgradeAssistant.Services.ISolution,System.String,Microsoft.UpgradeAssistant.Services.IFileSystem)">
            <summary>
            Returns true if project has an classic (legacy) CSharp project GUID in the .sln file.
            </summary>
            <param name="solution"></param>
            <param name="projectId"></param>
            <param name="fileSystem"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.StringBuilderExtensions">
            <summary>
            System.Text.StringBuilder extensions
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.StringBuilderExtensions.RemoveLast(System.Text.StringBuilder)">
            <summary>
            Removes the last character of this StringBuilder.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.StringBuilderExtensions.EndsWith(System.Text.StringBuilder,System.Char)">
            <summary>
            Whether this StringBuilder ends with the given character.
            </summary>
            <param name="character">last character to verify</param>
            <returns>true, if the given character is the last character; false, otherwise</returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.StringExtensions.EnsureTrailingBackslash(System.String)">
            <summary>
            Makes sure the string has a trailing backslash
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.StringExtensions.EnsureTrailingChar(System.String,System.Char)">
            <summary>
            Makes sure the string has the trailing character
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.StringExtensions.EnsureExtension(System.String,System.String)">
            <summary>
            Makes sure the string has a trailing specified extension.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.StringExtensions.MakeRelativePath(System.String,System.String)">
            <summary>
            Helper to make relative paths from physical paths. ie. calculates the relative path from 
            basePath to fullPath. Note that if either path is null, fullPath will be returned.
            Note that two paths that are equal return ".\".
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.StringExtensions.IsPartiallyMatchingControllerId(System.String,System.String)">
            <summary>
            Returns true if given string is one of the operation controller ID tokens.
            </summary>
            <param name="controllerId"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.StringExtensions.Hash(System.String)">
            <summary>
            Hashes given string with SHA256. If we ever need different hash type, we should create abstract contract.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.StringExtensions.WithWindowsPathSeparators(System.String)">
            <summary>
            Note: there are scenarios when regardless of OS we need windows style path separators.
            For example, inside of msbuild files all paths use them even on Mac OS.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.SymbolInfoExtensions.HasNewTypeCandidate(Microsoft.CodeAnalysis.SymbolInfo,System.String)">
            <summary>
            In transformers we often need to check if old type should be replaced by new one in the source
            file copied to different project. In some cases new core type is already inferred by the compiler,
            we don't need to do any changes in this case.
            </summary>
            <param name="symbolInfo"></param>
            <param name="mapping"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.SyntaxNodeExtensions.GetClassAttribute(Microsoft.CodeAnalysis.SyntaxNode,System.String)">
            <summary>
            Name has to be full type attribute name
            </summary>
            <param name="syntaxNode"></param>
            <param name="fullyQualifiedName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.SyntaxNodeExtensions.GetClassAttributes(Microsoft.CodeAnalysis.SyntaxNode,System.String[])">
            <summary>
            Returns method attributes with specified types. Name has to be full type attribute name.
            </summary>
            <param name="syntaxNode"></param>
            <param name="fullyQualifiedName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.SyntaxNodeExtensions.GetMethodAttributes(Microsoft.CodeAnalysis.SyntaxNode,System.String[])">
            <summary>
            Returns method attributes with specified types. Name has to be full type attribute name.
            </summary>
            <param name="syntaxNode"></param>
            <param name="fullyQualifiedNames"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.TelemetryExtensions.WithInitialDiagnostics(Microsoft.UpgradeAssistant.Services.TelemetryEvent,Microsoft.UpgradeAssistant.Services.DiagnosticsSnapshot)">
            <summary>
            From specified before snapshots we
             - Send "before upgrade" counts for errors and warnings (totals and NuGet specific)
             - Send counts per error/warning code serialized in a string format like ID0000=NNN;ID0001=NNN;...
               (we take top 20 in every case to avoid reaching limit of the property string length for the event)
             - We take 2 diffs between snapshots and build fixed and new snapshots and send same total/NuGet counts 
               and serialized top 20 items stats.
             
            Note: we split messages to NuGet and non-nuget in stats because code errors could 
            easily be in top 20 and we might never see NuGet errors or warnings in stats.
            </summary>
            <param name="telemetryEvent"></param>
            <param name="before"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.TelemetryExtensions.WithFinalDiagnostics(Microsoft.UpgradeAssistant.Services.TelemetryEvent,Microsoft.UpgradeAssistant.Services.DiagnosticsSnapshot,Microsoft.UpgradeAssistant.Services.DiagnosticsSnapshot,System.Collections.Generic.IEnumerable{System.Lazy{Microsoft.UpgradeAssistant.Services.IDiagnosticDataMiner,Microsoft.UpgradeAssistant.Services.IDiagnosticDataMinerMetadata}})">
            <summary>
            From specified before and after snapshots we
             - Send after upgrade counts for errors and warnings (totals and NuGet specific)
             - Send counts per error/warning code serialized in a string format like ID0000=NNN;ID0001=NNN;...
               (we take top 20 in every case to avoid reaching limit of the property string length for the event)
             - We take 2 diffs between snapshots and build fixed and new snapshots and send same total/NuGet counts 
               and serialized top 20 items stats.
             
            Note: we split messages to NuGet and non-nuget in stats because code errors could 
            easily be in top 20 and we might never see NuGet errors or warnings in stats.
            </summary>
            <param name="telemetryEvent"></param>
            <param name="before"></param>
            <param name="after"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Filters.ISliceFilter">
            <summary>
            An abstraction that helps with analysis of a <see cref="T:Microsoft.UpgradeAssistant.Slice"/> trees. Slice could be very large sometimes and
            we might want to help user to explore it. One of the features we could offer is allow to filter <see cref="T:Microsoft.UpgradeAssistant.Slice"/>
            and show only some sub-tree.
            Filters could be offered in the UX to be selected, or some of them could be for internal use, only via code.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Filters.ISliceFilter.GetNodesAsync(Microsoft.UpgradeAssistant.Slice,System.Threading.CancellationToken)">
            <summary>
            Given a <see cref="T:Microsoft.UpgradeAssistant.Slice"/> returns a list of nodes that matching given filer conditions. 
            </summary>
            <param name="slice"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Filters.SliceFilterAttribute">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Filters.SliceFilterAttribute.NodeKind">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Filters.SliceFilterAttribute.Order">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Filters.SliceFilterAttribute.DefaultNodesSelector">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Filters.SliceFilterAttribute.Traits">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Filters.ISliceFilterMetadata">
            <summary>
            Specifies how and when given filter is applied.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Filters.ISliceFilterMetadata.NodeKind">
            <summary>
            <see cref="T:Microsoft.UpgradeAssistant.Slice"/> root node kind for which this filter is applicable.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Filters.ISliceFilterMetadata.Order">
            <summary>
            Order of filters in case there are several filters applicable to the same kind (which is true most of the time).
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Filters.ISliceFilterMetadata.DefaultNodesSelector">
            <summary>
            When true, allows us to pick this filter to select/check nodes when slice is generated to have
            initial set of selected nodes displayed to a user.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Filters.ISliceFilterMetadata.Traits">
            <summary>
            Note: if null - it is ignored since we used this filter attribute in AppCAT and traits is not specified there.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Filters.SliceFilterBase">
            <summary>
            Base filter class that can traverse the slice tree via DFS.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.GroupSliceTree">
            <summary>
            Special flavor of the <see cref="T:Microsoft.UpgradeAssistant.SliceTree"/> for grouping same kind slice nodes together in the tree.
            For example, if node has children of kinds "type" and "view", instead of showing them all mixed we would
            show 2 sub folders Types and Views containing corresponding nodes. If tree has children of a one kind only
            we would skip grouping and add them directly to Children collection.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Helpers.GuidHelper">
            <summary>
            Helps to avoid new GUIDs being generated during unit tests.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Helpers.InitializableBase`1">
            <summary>
            Note: This class is not JTF aware. If the initialization task uses JTF.SwitchToUIThread or equivalent then this has the potential
                  to deadlock if a bg thread initializes it first, and while blocked on the UI thread switch, a the UI thread awaits the task created
                  on the bg thread. The bg thread will be blocked from switching since it will appear to be on a different JTF context.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Helpers.LocaleHelper">
            <summary>
            Helps to avoid new GUIDs being generated during unit tests.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Helpers.LocaleHelper.IsSupportedLocale(System.String)">
            <summary>
            Returns tru if specified locale has localized strings.
            </summary>
            <param name="locId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Helpers.LocalPathHelper.PreprocessLocalPaths(System.String,System.String,System.Boolean,Microsoft.UpgradeAssistant.Services.IEnvironmentService)">
            <summary>
            Makes local paths safe to share with others:
                - makes them relative to specified root path
                - checks if path is under local use or other standard folders and replaces them with env vars. 
            </summary>
            <param name="path"></param>
            <param name="rootPath"></param>
            <param name="isProtected"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Helpers.LruCache`2">
            <summary>
            For the reference, original source lived in Conversations repo.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="F:Microsoft.UpgradeAssistant.Helpers.LruCache`2.DefaultCacheSize">
            <summary>
            The default LRU cache size.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Helpers.LruCache`2.#ctor(System.Int32)">
            <summary>
                Constructs an <see cref="T:Microsoft.UpgradeAssistant.Helpers.LruCache`2" /> object.
            </summary>
            <param name="cacheSize">
                The maximum number of <typeparamref name="TKey" /> to <typeparamref name="TValue" /> mappings
                that can be cached. This defaults to <see cref="F:Microsoft.UpgradeAssistant.Helpers.LruCache`2.DefaultCacheSize" />, which is set to
                <value>4096</value>.
            </param>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Helpers.LruCache`2.Get(`0,`1@)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Helpers.LruCache`2.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Helpers.LruCache`2.Replace(`0,`1)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Helpers.LruCache`2.Count">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Helpers.LruCache`2.Clear">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Helpers.ObjectPool`1">
            <summary>
            Generic implementation of object pooling pattern with predefined pool size limit. The main
            purpose is that limited number of frequently used objects can be kept in the pool for
            further recycling.
            
            Notes: 
            1) it is not the goal to keep all returned objects. Pool is not meant for storage. If there
               is no space in the pool, extra returned objects will be dropped.
            
            2) it is implied that if object was obtained from a pool, the caller will return it back in
               a relatively short time. Keeping checked out objects for long durations is ok, but 
               reduces usefulness of pooling. Just new up your own.
            
            Not returning objects to the pool in not detrimental to the pool's work, but is a bad practice. 
            Rationale: 
               If there is no intent for reusing the object, do not use pool - just use "new". 
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Helpers.ObjectPool`1.Factory">
            <remarks>
            Not using System.Func{T} because this file is linked into the (debugger) Formatter,
            which does not have that type (since it compiles against .NET 2.0).
            </remarks>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Helpers.ObjectPool`1.Allocate">
            <summary>
            Produces an instance.
            </summary>
            <remarks>
            Search strategy is a simple linear probing which is chosen for it cache-friendliness.
            Note that Free will try to store recycled objects close to the start thus statistically 
            reducing how far we will typically search.
            </remarks>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Helpers.ObjectPool`1.Free(`0)">
            <summary>
            Returns objects to the pool.
            </summary>
            <remarks>
            Search strategy is a simple linear probing which is chosen for it cache-friendliness.
            Note that Free will try to store recycled objects close to the start thus statistically 
            reducing how far we will typically search in Allocate.
            </remarks>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Helpers.ObjectPool`1.ForgetTrackedObject(`0,`0)">
            <summary>
            Removes an object from leak tracking.  
            
            This is called when an object is returned to the pool.  It may also be explicitly 
            called if an object allocated from the pool is intentionally not being returned
            to the pool.  This can be of use with pooled arrays if the consumer wants to 
            return a larger array to the pool than was originally allocated.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Helpers.PooledStringBuilder">
            <summary>
            The usage is:
                   var inst = PooledStringBuilder.GetInstance();
                   var sb = inst.builder;
                   ... Do Stuff...
                   ... sb.ToString() ...
                   inst.Free();
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Helpers.PooledStringBuilder.CreatePool(System.Int32)">
            <summary>
            If someone need to create a private pool
            </summary>
            <param name="size">The size of the pool.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Helpers.ReflectionHelpers.CreateConstructorAccessor``4(System.Type,System.Type,System.Type,System.Type)">
            <summary>
            This function allows us to create new instance without knowning its type at compile time.
            It creates a lambda calling the contructor of <paramref name="typeToCreateNewInstance"/>
            with matching parameter types as <paramref name="arg0Type"/>, <paramref name="arg1Type"/> and <paramref name="arg2Type"/>
            </summary>
            <typeparam name="TArg0">Compile time type of <paramref name="arg0Type"/></typeparam>
            <typeparam name="TArg1">Compile time type of <paramref name="arg1Type"/></typeparam>
            <typeparam name="TArg2">Compile time type of <paramref name="arg2Type"/></typeparam>
            <typeparam name="TResult">Compile time type of <paramref name="typeToCreateNewInstance"/></typeparam>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Helpers.ReflectionHelpers.CreateFunctionAccessor``5(System.String,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            This function allows us to call a method without knowning its type at compile time.
            It creates a lambda calling the method on <paramref name="instanceType"/> using name <paramref name="methodName"/>
            with matching parameter types as <paramref name="arg0Type"/>, <paramref name="arg1Type"/> and <paramref name="arg2Type"/>
            </summary>
            <typeparam name="TInstance">Compile time type of <paramref name="instanceType"/></typeparam>
            <typeparam name="TArg0">Compile time type of <paramref name="arg0Type"/></typeparam>
            <typeparam name="TArg1">Compile time type of <paramref name="arg1Type"/></typeparam>
            <typeparam name="TArg2">Compile time type of <paramref name="arg2Type"/></typeparam>
            <typeparam name="TResult">Compile time type of <paramref name="resultType"/></typeparam>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Helpers.ReflectionHelpers.CreateFunctionAccessor``4(System.String,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            This function allows us to call a method without knowning its type at compile time.
            It creates a lambda calling the method on <paramref name="instanceType"/> using name <paramref name="methodName"/>
            with matching parameter types as <paramref name="arg0Type"/> and <paramref name="arg1Type"/>.
            </summary>
            <typeparam name="TInstance">Compile time type of <paramref name="instanceType"/></typeparam>
            <typeparam name="TArg0">Compile time type of <paramref name="arg0Type"/></typeparam>
            <typeparam name="TArg1">Compile time type of <paramref name="arg1Type"/></typeparam>
            <typeparam name="TResult">Compile time type of <paramref name="resultType"/></typeparam>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Helpers.ReflectionHelpers.CreatePropertyGetterAccessor``2(System.String,System.Type,System.Type)">
            <summary>
            This function allows us to get the property value without knowning its type at compile time.
            It creates a lambda calling the get method of the property on <paramref name="instanceType"/> using name <paramref name="propertyName"/>.
            </summary>
            <typeparam name="TInstance">Compile time type of <paramref name="instanceType"/></typeparam>
            <typeparam name="TResult">Compile time type of <paramref name="resultType"/></typeparam>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Helpers.ReflectionHelpers.CreateEventAccessor``2(System.String,System.Type,System.Boolean)">
            <summary>
            This function allows us to access the event add or remove method without knowing its type at compile time.
            It creates a lambda calling the add or remove method of the event on <paramref name="instanceType"/> using name <paramref name="eventName"/>.
            </summary>
            <typeparam name="TInstance">Compile time type of <paramref name="instanceType"/></typeparam>
            <typeparam name="TDelegate">EventHandler type</typeparam>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Helpers.ReflectionHelpers.CreateTaskResultAccessor``1(System.Type)">
            <summary>
            Create a function which gets the 'Result' property of Task. <typeparamref name="T"/> is the result type.
            Task should be awaited first before calling the function.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Helpers.ResourceUtilities.GetEmbeddedResourceFile(System.String,System.Reflection.Assembly)">
            <summary>
            Given the name of the resource file in the manifest file for the calling assembly, get the contents of the file
            </summary>
            <param name="resourceName">The full name of the resource, where an assembly bar with a baz.xml inside of a folder quaz is typically bar.quaz.baz.xml</param>
            <returns>The contents of the file; throws on error, such as when the resource is not found</returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Helpers.ResourceUtilities.GetEmbeddedResourceStream(System.String,System.Reflection.Assembly)">
            <summary>
            Returns a <see cref="T:System.IO.Stream"/> for given full resource name from calling Assembly.
            </summary>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Metadata.ProjectKinds">
            <summary>
             The well-known .NET project kinds.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.DefaultTypeNodeAdjuster">
            <summary>
            Adjusts slice nodes od the kind=Type to DbContext after checking symbols of given type name
            and checking if given class inherits from corresponding base classes.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.DefaultTypeNodeAdjuster.GetAdjustedNodeAsync(Microsoft.UpgradeAssistant.SliceContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.AssemblyReferenceSliceNodeBuilder">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.AssemblyReferenceSliceNodeBuilder.CreateNode(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.DbContextSliceNodeBuilder">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.DbContextSliceNodeBuilder.CreateNode(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.EmptySliceNodeBuilder">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.EmptySliceNodeBuilder.CreateNode(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.FileSliceNode">
            <summary>
             <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/> that represents a file.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.FileSliceNode.Create(System.String,System.String,System.String)">
            <summary>
             Creates a new instance of <see cref="T:Microsoft.UpgradeAssistant.Nodes.FileSliceNode"/> with the provided information.
            </summary>
            <param name="name">The file name.</param>
            <param name="path">The full file path.</param>
            <param name="projectPath">The containing project's root directory.</param>
            <returns>A new instance of <see cref="T:Microsoft.UpgradeAssistant.Nodes.FileSliceNode"/>.</returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.FileSliceNode.#ctor(System.String,System.String,System.String)">
            <summary>
             Creates a new instance of <see cref="T:Microsoft.UpgradeAssistant.Nodes.FileSliceNode"/> with the provided information.
            </summary>
            <param name="name">The file name.</param>
            <param name="path">The full file path.</param>
            <param name="projectPath">The containing project's root directory.</param>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.FileSliceNode.GetUpgradeDisplayName">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.FileSliceNodeBuilder">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.FileSliceNodeBuilder.CreateNode(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.FolderSliceNode">
            <summary>
             <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/> that represents a folder.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.FolderSliceNode.Create(System.String,System.String,System.Boolean)">
            <summary>
             Creates a new instance of <see cref="T:Microsoft.UpgradeAssistant.Nodes.FolderSliceNode"/> with the provided information.
            </summary>
            <param name="name">The folder name.</param>
            <param name="path">The full folder path.</param>
            <param name="isVirtual"><see langword="true"/> if the node represents a virtual folder; <see langword="false"/>, otherwise.</param>
            <returns>A new instance of <see cref="T:Microsoft.UpgradeAssistant.Nodes.FolderSliceNode"/>.</returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.FolderSliceNode.#ctor(System.String,System.String,System.Boolean)">
            <summary>
             Initializes <see cref="T:Microsoft.UpgradeAssistant.Nodes.FolderSliceNode"/> with the provided information.
            </summary>
            <param name="name">The folder name.</param>
            <param name="path">The full folder path.</param>
            <param name="isVirtual"><see langword="true"/> if the node represents a virtual folder; <see langword="false"/>, otherwise.</param>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Nodes.FolderSliceNode.IsVirtual">
            <summary>
             Indicates whether the node represents a virtual folder.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.FolderSliceNodeBuilder">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.FolderSliceNodeBuilder.CreateNode(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.PackageReferenceSliceNode">
            <summary>
             <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/> that represents a project's package reference.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.PackageReferenceSliceNode.#ctor(System.String,System.String,System.String)">
            <summary>
             Initializes a new instance of the <see cref="T:Microsoft.UpgradeAssistant.Nodes.PackageReferenceSliceNode"/> class with the specified parameters.
            </summary>
            <param name="name">The name of the package (defined by <c>Include</c> metadata).</param>
            <param name="path">The path to a physical location of the package on disk.</param>
            <param name="version">The version of the package (defined by <c>Version</c> metadata).</param>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Nodes.PackageReferenceSliceNode.Version">
            <summary>
             Gets the version of the package (defined by <c>Version</c> metadata).
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.PackageReferenceSliceNodeBuilder">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.PackageReferenceSliceNodeBuilder.CreateNode(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Nodes.ProjectReferenceSliceNode.UpgradeToProjectPath">
            <summary>
            If project represented by this node has active incremental upgrade to some another target project,
            this property would contain path to that target project. It is settable internally, to let Operation
            initialization logic refresh it before operation executes in case Slice data became stale.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.ProjectReferenceSliceNodeBuilder">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.ProjectReferenceSliceNodeBuilder.CreateNode(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.ProjectSliceNodeBuilder">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.ProjectSliceNodeBuilder.CreateNode(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.RuleCategorySliceNodeBuilder">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.RuleCategorySliceNodeBuilder.CreateNode(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.RuleInstanceSliceNode.Create(System.String,System.Collections.Generic.IEnumerable{Microsoft.UpgradeAssistant.Analysis.Rules.Report.RuleInstanceConfig},System.String)">
            <summary>
            Note: name + path + node kind has to be unique (or empty , then Guid will be used for name).
            </summary>
            <param name="path"></param>
            <param name="instances"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.RuleInstanceSliceNodeBuilder">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.RuleInstanceSliceNodeBuilder.CreateNode(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.SolutionFolderSliceNode">
            <summary>
             <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/> that represents a folder.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.SolutionFolderSliceNode.Create(System.String,System.String,System.Boolean)">
            <summary>
             Creates a new instance of <see cref="T:Microsoft.UpgradeAssistant.Nodes.SolutionFolderSliceNode"/> with the provided information.
            </summary>
            <param name="name">The folder name.</param>
            <param name="path">The full folder path.</param>
            <param name="isVirtual"><see langword="true"/> if the node represents a virtual folder; <see langword="false"/>, otherwise.</param>
            <returns>A new instance of <see cref="T:Microsoft.UpgradeAssistant.Nodes.SolutionFolderSliceNode"/>.</returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.SolutionFolderSliceNode.#ctor(System.String,System.String,System.Boolean)">
            <summary>
             Initializes <see cref="T:Microsoft.UpgradeAssistant.Nodes.SolutionFolderSliceNode"/> with the provided information.
            </summary>
            <param name="name">The folder name.</param>
            <param name="path">The full folder path.</param>
            <param name="isVirtual"><see langword="true"/> if the node represents a virtual folder; <see langword="false"/>, otherwise.</param>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Nodes.SolutionFolderSliceNode.IsVirtual">
            <summary>
             Indicates whether the node represents a virtual folder.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.SolutionFolderSliceNodeBuilder">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.SolutionFolderSliceNodeBuilder.CreateNode(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.SolutionSliceNodeBuilder">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.SolutionSliceNodeBuilder.CreateNode(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.CreateProjectSliceNodeBuilder">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.CreateProjectSliceNodeBuilder.CreateNode(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.OperationInitializerSliceNodeBuilder">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.OperationInitializerSliceNodeBuilder.CreateNode(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.ProjectComponentsInitializerSliceNodeBuilder">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.ProjectComponentsInitializerSliceNodeBuilder.CreateNode(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.ProjectDependenciesFinalizerSliceNodeBuilder">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.ProjectDependenciesFinalizerSliceNodeBuilder.CreateNode(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.TypeSliceNodeBuilder">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.TypeSliceNodeBuilder.CreateNode(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.ISliceNodeAdjuster">
            <summary>
            Abstraction for adjusting node kind to a more precise kind, i.e. Type -> Controller or Type -> DbContext etc.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.ISliceNodeAdjuster.GetAdjustedNodeAsync(Microsoft.UpgradeAssistant.SliceContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <summary>
            Checks if it can adjust specified node kind and make it more precise. For example,
            when kind=Type, it could be any type or controller/DbContext. Thus all available builders
            would be called and if anyone can adjust kind, first one would win and factory would use that
            kind to find a builder for the node.
            </summary>
            <param name="context"></param>
            <param name="sliceNode"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.ISliceNodeBuilder">
            <summary>
            Abstraction for building concrete <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/> models or associated kind.
            Kind is specified via <see cref="T:Microsoft.UpgradeAssistant.Nodes.SliceNodeBuilderAttribute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.ISliceNodeBuilder.CreateNode(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Creates a <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/> of corresponding kind.
            </summary>
            <param name="name"></param>
            <param name="filePath"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.ISliceNodeFactory">
            <summary>
            A service responsible for creating <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/> objects of any kind.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.ISliceNodeFactory.CreateNode(System.String,System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Creates node of specified using corresponding <see cref="T:Microsoft.UpgradeAssistant.Nodes.ISliceNodeBuilder"/>. If node kind
            is custom and there is no builder found, just creates a default <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/>.
            </summary>
            <param name="kind"></param>
            <param name="name"></param>
            <param name="filePath"></param>
            <param name="properties"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.ISliceNodeFactory.GetAdjustedNodeAsync(Microsoft.UpgradeAssistant.SliceContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <summary>
            Checks if it can adjust specified node kind and make it more precise. Uses available
            <see cref="T:Microsoft.UpgradeAssistant.Nodes.ISliceNodeAdjuster"/> objects to determine adjusted kind. If kind cannot
            be adjusted returns original slice node.
            </summary>
            <param name="context"></param>
            <param name="sliceNode"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.ISliceNodeLocation">
            <summary>
            Indicates a slice node that can have a location specific to a context where this node belongs to.
            For example, type slice nodes belong to corresponding projects which could be different from the
            starting project and when operation runs those nodes should be upgraded according to their
            corresponding locations.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Nodes.ISliceNodeLocation.LocationPath">
            <summary>
            Location of the node. For code/type nodes it is a containing project path.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.ISliceNodeProvider">
            <summary>
            The "work horse" of the discovery stage, is called on the applicable node kinds
            and is expected to scan the given node and return back its immediate dependents.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.ISliceNodeProvider.GetNodesAsync(Microsoft.UpgradeAssistant.SliceContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <summary>
            Returns a set of direct child nodes for given <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/>.
            </summary>
            <param name="context"></param>
            <param name="parentNode"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.ISliceNodeValidator">
            <summary>
            Is called before the <see cref="T:Microsoft.UpgradeAssistant.Transformers.ISliceNodeTransformer"/> called on a <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/> to validate
            and fail early. It should only fail the whole node if its really sure it does not worth to run transformers
            on it since it is completely broken.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.ISliceNodeValidator.ValidateAsync(Microsoft.UpgradeAssistant.Operations.OperationContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <summary>
            Returns a set of direct child nodes for given <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/>.
            </summary>
            <param name="context"></param>
            <param name="parentNode"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.CreateProjectProvider.GetNodesAsync(Microsoft.UpgradeAssistant.SliceContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.DefaultTypeProvider">
            <summary>
            Returns slice nodes for non-framework types depending on entry point type slice node.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.DefaultTypeProvider.CreateNode(Microsoft.UpgradeAssistant.SliceContext,Microsoft.CodeAnalysis.INamedTypeSymbol,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.FileProvider.GetNodesAsync(Microsoft.UpgradeAssistant.SliceContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.ProjectComponentsInitializerProvider.GetNodesAsync(Microsoft.UpgradeAssistant.SliceContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.ProjectDependenciesFinalizerProvider.GetNodesAsync(Microsoft.UpgradeAssistant.SliceContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.ProjectDependenciesProvider.GetNodesAsync(Microsoft.UpgradeAssistant.SliceContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.ProjectProvider.GetNodesAsync(Microsoft.UpgradeAssistant.SliceContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.ApiCompatibility">
            <summary>
            Helper that knows how to analyze ApiCatalog results and produce necessary API compatibility rule slice nodes.
            </summary>
        </member>
        <member name="F:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.ApiCompatibility.DefaultSystemTypes">
            <summary>
            Contains names (without namespaces) of default (or old and popular types) from System namespace.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Binary.BinaryCache" -->
        <member name="P:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Binary.BinaryCache.KeyProvider">
            <summary>
            Note: when IFileSystem implements GetFileVersion we should use that one.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Binary.BinaryCache.Initialize">
            <summary>
            Since we could have multiple VS instances running simultaneously there could be IO exceptions
            if they try to create the same folder, thus we catch them but proceed further since folder would
            be created anyway.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Binary.BinaryCache.GetResults(Microsoft.UpgradeAssistant.Analysis.Rules.RuleSet,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Binary.BinaryCache.SetResults(System.String,System.Collections.Generic.IEnumerable{Microsoft.UpgradeAssistant.Analysis.Rules.Report.RuleInstanceConfig},System.String)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Binary.BinaryRuleProviderBase">
            <summary>
            Base node provider that can discover rule instances in binaries.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Binary.BinaryRuleProviderBase.GetCacheScenarioKey(Microsoft.UpgradeAssistant.SliceContext)">
            <summary>
            Returns a key that is unique for current analysis operation =, like TFM or something else, that 
            would make binary scan results specific to that scenario (they will be cached separately).
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Binary.BinaryRuleProviderBase.GetNodesAsync(Microsoft.UpgradeAssistant.SliceContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Binary.BreakingChangesBinaryRuleProviderBase">
            <summary>
            Discovers target framework breaking changes rule instances by looking in binary dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Binary.BreakingChangesBinaryRuleProviderBase.ValidateAsync(Microsoft.UpgradeAssistant.Services.BinaryContext,Mono.Cecil.AssemblyDefinition,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Binary.BreakingChangesBinaryRuleProviderBase.HandleAsync(Microsoft.UpgradeAssistant.Services.BinaryContext,System.String,System.Exception,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Binary.BreakingChangesBinaryVisitor.VisitMemberReferenceAsync(Microsoft.UpgradeAssistant.Services.BinaryContext,Mono.Cecil.MemberReference,Mono.Cecil.MemberReference,System.Threading.CancellationToken)">
            <summary>
            Analyze all members of types accessed by code in currently scanned assembly that are not resigning in it.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Binary.BreakingChangesBinaryVisitor.VisitTypeAsync(Microsoft.UpgradeAssistant.Services.BinaryContext,Mono.Cecil.TypeDefinition,System.Threading.CancellationToken)">
            <summary>
            Analyze base types/interfaces of any class defined in currently scanned assembly.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Binary.BreakingChangesBinaryVisitor.VisitPropertyAsync(Microsoft.UpgradeAssistant.Services.BinaryContext,Mono.Cecil.PropertyDefinition,System.Threading.CancellationToken)">
            <summary>
            Analyze property type if it is not originates in currently scanned assembly.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Binary.BreakingChangesBinaryVisitor.VisitFieldAsync(Microsoft.UpgradeAssistant.Services.BinaryContext,Mono.Cecil.FieldDefinition,System.Threading.CancellationToken)">
            <summary>
            Analyze field type if it is not originates in currently scanned assembly.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Binary.BreakingChangesBinaryVisitor.VisitEventAsync(Microsoft.UpgradeAssistant.Services.BinaryContext,Mono.Cecil.EventDefinition,System.Threading.CancellationToken)">
            <summary>
            Analyze event type if it is not originates in currently scanned assembly.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Binary.ProjectBreakingChangesBinaryRuleProvider">
            <summary>
            Discovers rule instances by looking in project binary dependencies.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Code.ApiContext">
            <summary>
            Passed to visitors to let them cache some data during scanning an assembly.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Code.ApiScanner.GetBaseTypeNode(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Can find node for class base type of interfaces.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Code.BreakingChangesRuleProvider">
            <summary>
            Inspects the code and discovers breaking changes.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Code.BreakingChangesRuleProvider.GetRuleInstancesAsync(Microsoft.UpgradeAssistant.SliceContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Features.AspNetIdentityRuleProvider">
            <summary>
            Detects the use of ASP.NET MVC default Idenity features that need to be updated when upgrading to a newer framework version.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Features.AspNetIdentityRuleProvider.GetNodesAsync(Microsoft.UpgradeAssistant.SliceContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Features.BundlingRuleProvider">
            <summary>
            Detects use of System.Web.Optimization bundling and minification features that may need to be updated when upgrading to a newer framework version.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Features.BundlingRuleProvider.GetNodesAsync(Microsoft.UpgradeAssistant.SliceContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Features.DependencyInjectionRuleProvider">
            <summary>
            Detects the use of custom DI tech in old MVC apps that need to be registered differently when upgrading to a .NET Core or switched to .NET Core native DI.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Features.DependencyInjectionRuleProvider.GetNodesAsync(Microsoft.UpgradeAssistant.SliceContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Features.DependencyInjectionRuleProvider.CodeFilesWithAutofacAsync(Microsoft.UpgradeAssistant.SliceContext,System.Threading.CancellationToken)">
            <summary>
            Checks for main Autofac contract dependencies, not every single type (only ones that we need to hint to AI later, that lead to special logical decisions).
            </summary>
            <param name="context"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Features.EntityFrameworkRuleProvider">
            <summary>
            Detects the use of classic EntityFramework features that need to be registered differently when upgrading to a .NET Core.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Features.EntityFrameworkRuleProvider.GetNodesAsync(Microsoft.UpgradeAssistant.SliceContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Features.EntityFrameworkRuleProvider.CodeFilesWithEntityFrameworkAsync(Microsoft.UpgradeAssistant.SliceContext,System.Threading.CancellationToken)">
            <summary>
            Checks main EF contract dependencies, not every single type (only ones that we need to hint to AI later, that lead to special logical decisions).
            </summary>
            <param name="context"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Features.GlobalAsaxRuleProvider">
            <summary>
            Detects if ASP.NET MVC project has Global.asax.cs file (it always does but we need to add it as a feature in the analysis report).
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Features.GlobalAsaxRuleProvider.GetNodesAsync(Microsoft.UpgradeAssistant.SliceContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Features.MvcFilteringRuleProvider">
            <summary>
            Detects the use of ASP.NET MVC filtering features that may need to be updated when upgrading to a newer framework version.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Features.MvcFilteringRuleProvider.GetNodesAsync(Microsoft.UpgradeAssistant.SliceContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Features.MvcRoutingRuleProvider">
            <summary>
            Detects use of ASP.NET MVC routing features that may need to be updated when upgrading to a newer framework version.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Features.MvcRoutingRuleProvider.GetNodesAsync(Microsoft.UpgradeAssistant.SliceContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Features.OwinRuleProvider">
            <summary>
            Detects the use of Owin features that need to be removed and converted to .NET Core middleware.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Features.OwinRuleProvider.GetNodesAsync(Microsoft.UpgradeAssistant.SliceContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Features.SystemMessagingRuleProvider">
            <summary>
            Detects the use System.Messaging in .NET Framework projects, which needs to be upgraded to something else (like MSMQ).
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Features.SystemMessagingRuleProvider.GetNodesAsync(Microsoft.UpgradeAssistant.SliceContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Features.WcfUpgradeRuleProvider">
            <summary>
            Checks if project has .NET Framework WCF and returns a set of rules with major WCF components that were discovered.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.Features.WcfUpgradeRuleProvider.GetNodesAsync(Microsoft.UpgradeAssistant.SliceContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.FrameworkRuleProviderBase">
            <summary>
            Base class specific to analysis for target framework upgrade scenarios.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.FrameworkRuleProviderBase.GetNodesAsync(Microsoft.UpgradeAssistant.SliceContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.FrameworkRuleProviderBase.ShouldScanAsync(Microsoft.UpgradeAssistant.SliceContext,System.Threading.CancellationToken)">
            <summary>
            Checks if this project needs to be scanned for rules.
            </summary>
            <param name="context"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.NuGet.NuGetPackagesFrameworkRuleProvider.GetRuleInstancesAsync(Microsoft.UpgradeAssistant.SliceContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.NuGet.NuGetPackagesFrameworkRuleProvider.GetPackageMapRuleInstanceAsync(Microsoft.UpgradeAssistant.SliceContext,Microsoft.UpgradeAssistant.Services.Package,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Package maps could provide new version for a package for given target framework or 
            replace that package with one or more other packages. Thus if we found package map
            for given package we would have one rule reported for it, that would have a list
            replacement packages in its snippet.
            
            Note: we might need to add some structure to snippets, like a JSON to be able to 
            parse it later if needed during summarizing of the report.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.NuGet.NuGetPackageSourceMappingsRuleProvider">
            <summary>
            Checks package state: is it deprecated or has any security vulnerabilities.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.NuGet.NuGetPackageSourceMappingsRuleProvider.GetRuleInstancesAsync(Microsoft.UpgradeAssistant.SliceContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.NuGet.NuGetPackagesStateRuleProvider">
            <summary>
            Checks package state: is it deprecated or has any security vulnerabilities.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.NuGet.NuGetPackagesStateRuleProvider.GetRuleInstancesAsync(Microsoft.UpgradeAssistant.SliceContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.NuGet.ProjectSdkStyleRuleProvider">
            <summary>
            Checks is project is SDK style or not. If not, we return an issue suggesting that this would need to happen.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.NuGet.ProjectSdkStyleRuleProvider.GetNodesAsync(Microsoft.UpgradeAssistant.SliceContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.NuGet.ProjectTargetFrameworkRuleProvider">
            <summary>
            Checks is project's TFM needs to be changed for the upgrade.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.Providers.Rules.NuGet.ProjectTargetFrameworkRuleProvider.GetRuleInstancesAsync(Microsoft.UpgradeAssistant.SliceContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.TypeContainingBinaryProvider.GetNodesAsync(Microsoft.UpgradeAssistant.SliceContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.TypeProvider">
            <summary>
            This provider can work both for C# and VisualBasic, though for Visual basic there is one difference
            where class statements associated with INamedTypeSymbol are not the containers of all class syntax nodes,
            but their parent ClassBlock is the container. In C# ClassDeclaration syntax node is the container itself.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.TypeProvider.GetNodesAsync(Microsoft.UpgradeAssistant.SliceContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.SliceNodeAdjusterAttribute">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Nodes.SliceNodeAdjusterAttribute.NodeKind">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Nodes.SliceNodeAdjusterAttribute.Order">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.ISliceNodeAdjusterMetadata">
            <summary>
            Metadata specifying what node kind should an adjuster be called for and in what order.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Nodes.ISliceNodeAdjusterMetadata.NodeKind">
            <summary>
            Node kind applicable to a particular <see cref="T:Microsoft.UpgradeAssistant.Nodes.ISliceNodeAdjuster"/>.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Nodes.ISliceNodeAdjusterMetadata.Order">
            <summary>
            If there are several kind adjusters applicable for a node kind they will be ordered
            using this order and adjuster that can adjust specified kind first wins.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.ISliceNodeBuilderMetadata">
            <summary>
            Builder that knows how to construct a node of particular kind.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.SliceNodeFactory">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.SliceNodeFactory.CreateNode(System.String,System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.SliceNodeFactory.GetAdjustedNodeAsync(Microsoft.UpgradeAssistant.SliceContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.SliceNodeProviderAttribute">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Nodes.SliceNodeProviderAttribute.NodeKind">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Nodes.SliceNodeProviderAttribute.Traits">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Nodes.SliceNodeProviderAttribute.Language">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Nodes.ISliceNodeProviderMetadata.NodeKind">
            <summary>
            Specifies a kind of <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/> for which this node provider is applicable.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Nodes.ISliceNodeProviderMetadata.Traits">
            <summary>
            A capabilities expression to use when decision is made to use the provider or not for current project context.
            When null, applied for all projects.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Nodes.ISliceNodeProviderMetadata.Language">
            <summary>
            Any supported project language, for now we have only C# and VB. If null, any language is supported.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.SliceNodeValidatorAttribute">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Nodes.SliceNodeValidatorAttribute.Id">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Nodes.SliceNodeValidatorAttribute.NodeKind">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Nodes.SliceNodeValidatorAttribute.Traits">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Nodes.ISliceNodeValidatorMetadata.Id">
            <summary>
            Unique ID of the validator to be used in telemetry.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Nodes.ISliceNodeValidatorMetadata.NodeKind">
            <summary>
            Specifies a kind of <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/> for which this node validator is applicable.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Nodes.ISliceNodeValidatorMetadata.Traits">
            <summary>
            A capabilities expression to use when decision is made to use the validator or not for current project context.
            When null, applied for all projects.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Nodes.ISliceNodeValidatorMetadata.Order">
            <summary>
            Order in which validator should execute for a slice node.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.SliceNodeValidatorResult">
            <summary>
            Result returned by <see cref="T:Microsoft.UpgradeAssistant.Nodes.ISliceNodeValidator"/>.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.CodeFileSliceNodeValidator">
            <summary>
            Validates if code file exists on disk and in the Roslyn workspace
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.CodeFileSliceNodeValidator.ValidateAsync(Microsoft.UpgradeAssistant.Operations.OperationContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Nodes.XamlCodeFileSliceNodeValidator">
            <summary>
            Validates if xaml file exists on disk.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Nodes.XamlCodeFileSliceNodeValidator.ValidateAsync(Microsoft.UpgradeAssistant.Operations.OperationContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.Categories.NuGetOperationCategory.Id">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.Categories.NuGetOperationCategory.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.Categories.NuGetOperationCategory.Description">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.Categories.NuGetOperationCategory.Order">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.Categories.UpgradeFeatureOperationCategory.Id">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.Categories.UpgradeFeatureOperationCategory.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.Categories.UpgradeFeatureOperationCategory.Description">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.Categories.UpgradeFeatureOperationCategory.Order">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.Categories.UpgradeFrameworkOperationCategory.Id">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.Categories.UpgradeFrameworkOperationCategory.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.Categories.UpgradeFrameworkOperationCategory.Description">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.Categories.UpgradeFrameworkOperationCategory.Order">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.Categories.UpgradeToTestingPlatformOperationCategory.Id">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.Categories.UpgradeToTestingPlatformOperationCategory.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.Categories.UpgradeToTestingPlatformOperationCategory.Description">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.Categories.UpgradeToTestingPlatformOperationCategory.Order">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.CpmUpgradeControllerBase.Id">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.CpmUpgradeControllerBase.CategoryId">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.CpmUpgradeControllerBase.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.CpmUpgradeControllerBase.Description">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.CpmUpgradeControllerBase.Order">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.CpmUpgradeControllerBase.GetContextAsync(System.String,Microsoft.UpgradeAssistant.Traits.ITraitsSet,Microsoft.UpgradeAssistant.Services.IServiceCollection,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.CpmUpgradeControllerBase.GetTraitsAsync(Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.CpmUpgradeControllerBase.GetOperationDefinitionAsync(System.String,Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.ProjectFrameworkInplaceControllerBase.Id">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.ProjectFrameworkInplaceControllerBase.CategoryId">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.ProjectFrameworkInplaceControllerBase.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.ProjectFrameworkInplaceControllerBase.Description">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.ProjectFrameworkInplaceControllerBase.GetContextAsync(System.String,Microsoft.UpgradeAssistant.Traits.ITraitsSet,Microsoft.UpgradeAssistant.Services.IServiceCollection,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.ProjectFrameworkInplaceControllerBase.GetTraitsAsync(Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.ProjectFrameworkInplaceControllerBase.GetOperationDefinitionAsync(System.String,Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.ProjectFrameworkSideBySideControllerBase.Id">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.ProjectFrameworkSideBySideControllerBase.CategoryId">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.ProjectFrameworkSideBySideControllerBase.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.ProjectFrameworkSideBySideControllerBase.Description">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.ProjectFrameworkSideBySideControllerBase.GetContextAsync(System.String,Microsoft.UpgradeAssistant.Traits.ITraitsSet,Microsoft.UpgradeAssistant.Services.IServiceCollection,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.ProjectFrameworkSideBySideControllerBase.GetTraitsAsync(Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.ProjectFrameworkSideBySideControllerBase.GetOperationDefinitionAsync(System.String,Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.SdkStyleUpgradeControllerBase.Id">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.SdkStyleUpgradeControllerBase.CategoryId">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.SdkStyleUpgradeControllerBase.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.SdkStyleUpgradeControllerBase.Description">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.SdkStyleUpgradeControllerBase.GetContextAsync(System.String,Microsoft.UpgradeAssistant.Traits.ITraitsSet,Microsoft.UpgradeAssistant.Services.IServiceCollection,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.SdkStyleUpgradeControllerBase.GetTraitsAsync(Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.SdkStyleUpgradeControllerBase.GetOperationDefinitionAsync(System.String,Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Operations.DefaultSliceNodeOrderer">
            <summary>
            Default orderer that orders nodes by default <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/> order.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.DefaultSliceNodeOrderer.OrderNodes(System.Collections.Generic.IEnumerable{Microsoft.UpgradeAssistant.SliceNode},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Operations.Finalizers.ProjectBuildTelemetryOperationFinalizer">
            <summary>
            Builds project and adds final diagnostics to the operation telemetry event. It gets initial diagnostics 
            from the context and takes diffs with final ones to see which diagnostics were fixed and which appeared new.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.IAnalysisOperationController.GetAnalysisAsync(Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Collections.Generic.Dictionary{System.String,System.Object},Microsoft.UpgradeAssistant.Analysis.AnalysisSettings,Microsoft.UpgradeAssistant.Analysis.IAnalysisProgress,System.Threading.CancellationToken)">
            <summary>
            Returns an analysis experience object for the given traits, properties and settings.
            </summary>
            <param name="traits"></param>
            <param name="properties"></param>
            <param name="settings"></param>
            <param name="progress"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Operations.IMultiContextOperationController">
            <summary>
            Controller that can manage operation on multiple location and provide inner 
            <see cref="T:Microsoft.UpgradeAssistant.Operations.OperationContext"/> objects for each location.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.IMultiContextOperationController.GetInnerOperationContextsAsync(Microsoft.UpgradeAssistant.Operations.OperationContext,System.Collections.Generic.IEnumerable{Microsoft.UpgradeAssistant.SliceNode},System.Threading.CancellationToken)">
            <summary>
            Returns a list of inner operation contexts for given main operation context and operation slice nodes.
            It can be used if operation needs to run across multiple projects. In this case main operation could 
            contain slice nodes representing other related projects and this method would return operation contexts
            for those projects.
            </summary>
            <param name="mainContext"></param>
            <param name="nodes"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Operations.Initializers.ProjectBuildTelemetryOperationInitializer">
            <summary>
            Builds project and adds initial diagnostics to the operation telemetry event. It stores initial diagnostics 
            in the context to be accessed at the end.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.IOperationController.Id">
            <summary>
            Unique ID of the operation.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.IOperationController.CategoryId">
            <summary>
            Category ID of the operation to group them together.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.IOperationController.DisplayName">
            <summary>
            Short friendly name of the operation to show in the UX.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.IOperationController.Description">
            <summary>
            Description of the operation to show in the UX.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.IOperationController.GetContextAsync(System.String,Microsoft.UpgradeAssistant.Traits.ITraitsSet,Microsoft.UpgradeAssistant.Services.IServiceCollection,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Returns new operation context.
            </summary>
            <param name="sourceProjectPath"></param>
            <param name="traits"></param>
            <param name="serviceCollection"></param>
            <param name="properties"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.IOperationController.GetTraitsAsync(Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Threading.CancellationToken)">
            <summary>
            Decorates given traits with controller specific ones.
            </summary>
            <param name="traits"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.IOperationController.GetOperationDefinitionAsync(System.String,Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Returns operation definition that contains initial operation properties and initial steps.
            </summary>
            <param name="sourcePath"></param>
            <param name="traits"></param>
            <param name="properties"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Operations.IOperationHost">
            <summary>
            Abstract operation host that can provide some operation related objects.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.IOperationHost.GetServiceCollection">
            <summary>
            Returns service collection with all available services.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.IOperationHost.GetSliceAsync(System.String,Microsoft.UpgradeAssistant.Traits.ITraitsSet,Microsoft.UpgradeAssistant.SliceNode,Microsoft.UpgradeAssistant.SliceOptions,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:Microsoft.UpgradeAssistant.Slice"/> for given project context information and root node.
            </summary>
            <param name="projectPath"></param>
            <param name="traits"></param>
            <param name="rootNode"></param>
            <param name="sliceOptions"></param>
            <param name="properties"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.IOperationHost.GetSliceAsync(Microsoft.UpgradeAssistant.SliceContext,Microsoft.UpgradeAssistant.SliceNode,Microsoft.UpgradeAssistant.SliceOptions,System.Threading.CancellationToken)">
            <summary>
            Returns a slice for a known root <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/>.
            </summary>
            <param name="context"></param>
            <param name="rootNode"></param>
            <param name="sliceOptions"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.IOperationHost.GetSliceWithChildrenAsync(System.String,Microsoft.UpgradeAssistant.Traits.ITraitsSet,Microsoft.UpgradeAssistant.SliceNode,System.Collections.Generic.IEnumerable{Microsoft.UpgradeAssistant.SliceNode},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:Microsoft.UpgradeAssistant.Slice"/> for given project context information and root node and specified
            children. No discovery is performed, children are used as-is.
            </summary>
            <param name="projectId"></param>
            <param name="traits"></param>
            <param name="rootNode"></param>
            <param name="children"></param>
            <param name="properties"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.IOperationHost.GetTraitsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns a set of traits for given project.
            </summary>
            <param name="projectPath"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.IOperationHost.GetOperationAsync(Microsoft.UpgradeAssistant.Operations.IOperationController,System.String,Microsoft.UpgradeAssistant.Traits.ITraitsSet,Microsoft.UpgradeAssistant.Slice,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},Microsoft.UpgradeAssistant.Services.IOperationProgressService,System.Threading.CancellationToken)">
            <summary>
            Creates a new operation to upgrade source project given a <see cref="T:Microsoft.UpgradeAssistant.Slice"/> with selected slice nodes to be upgraded.
            </summary>
            <param name="controller"></param>
            <param name="sourceProjectPath"></param>
            <param name="traits"></param>
            <param name="slice"></param>
            <param name="properties"></param>
            <param name="progress"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.IOperationHost.GetOperationControllersAsync(Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Threading.CancellationToken)">
            <summary>
            Returns a list of operation controllers applicable to the current context.
            </summary>
            <param name="traits"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.IOperationSliceNodeProvider.GetNodeAsync(System.String,Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Returns root node of the slice tree for the current operation.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Operations.ISliceNodeOrderer">
            <summary>
            Orders given collection of nodes in some particular order. When UX supports it, orderers
            should have some descriptors and could be selected via UX. In addition, if needed, we could
            specify attribute for orderer where we could specify some metadata like "operation name" etc,
            which would help us choose correct orderer.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Operations.UpgradeProjectOperationMessage">
            <summary>
            Specific operation message model carrying information to suggest user to upgrade a project dependency to a new project.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Operations.NodeFinalizers.DependenciesFinalizerNodeFinalizer">
            <summary>
            Resolves analysis issues related to project file.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Operations.NodeFinalizers.FileApiNodeFinalizer">
            <summary>
            Resolves analysis issues related to project file.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Operations.NodeFinalizers.ProjectNodeFinalizer">
            <summary>
            Resolves analysis issues related to project file.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Operations.Operation">
            <summary>
            Upgrade operation that executes applicable transformers on each node synchronously.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Operations.OperationBase">
            <summary>
            Upgrade operation that executes applicable transformers on each node synchronously.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Operations.OperationBuilder">
            <summary>
            Helper builder object to hide some operation creation specifics.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Operations.OperationCategoryAttribute">
            <summary>
            Attribute that is applicable for implementations of <see cref="T:Microsoft.UpgradeAssistant.Operations.IOperationCategory"/>.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.OperationCategoryAttribute.Id">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.IOperationCategoryMetadata.Id">
            <summary>
            Unique ID of the category.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Operations.OperationContext">
            <summary>
            Context passed to each <see cref="T:Microsoft.UpgradeAssistant.Transformers.ISliceNodeTransformer" />.
            
            Note: for now it does not have extra properties comparing to SliceContext, however we will
            add them later, when would implement communication between transformers and the Operation
            in case there is user interaction needed.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.OperationContextExtensions.SliceNodeTelemetryEvent(Microsoft.UpgradeAssistant.Operations.OperationContext)">
            <summary>
            Returns current slice node's telemetry event to let transformers append properties to it.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.OperationContextExtensions.CorrelationId(Microsoft.UpgradeAssistant.Operations.OperationContext)">
            <summary>
            Returns operation correlation ID to use in telemetry events associated with this operation.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.OperationContextExtensions.IsFileRemoved(Microsoft.UpgradeAssistant.Operations.OperationContext,System.String)">
            <summary>
            Returns true if file was removed earlier by some other transformer at project level.
            </summary>
            <param name="context"></param>
            <param name="projectRelativeFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.OperationContextExtensions.TargetProject(Microsoft.UpgradeAssistant.Operations.OperationContext)">
            <summary>
            Ensures target project is returned for given context. If it is side by side context,
            we return target project, otherwise we return source project since operation happens
            in-place.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.OperationContextExtensions.TryGetTargetFilePath(Microsoft.UpgradeAssistant.Operations.OperationContext,System.String,System.String@)">
            <summary>
            Attempts to determine file path under target project. If context is not side by side,
            just returns file path. If context is side by side, we check if file is under source
            project folder first and if it is, we get relative file path and combine it with target.
            project directory,
            </summary>
            <param name="context"></param>
            <param name="filePath"></param>
            <param name="targetFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.OperationContextExtensions.RequireProjectReload(Microsoft.UpgradeAssistant.Operations.OperationContext)">
            <summary>
            Stores information in the context that indicate that project reload is required.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.OperationContextExtensions.IsProjectReloadRequired(Microsoft.UpgradeAssistant.Operations.OperationContext)">
            <summary>
            Returns true if some prior transformer required project reload.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.OperationContextExtensions.Print(Microsoft.UpgradeAssistant.Operations.OperationContext,Microsoft.UpgradeAssistant.Services.ILogger)">
            <summary>
            Prints context data to logger.
            </summary>
            <param name="logger"></param>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Operations.OperationControllerAttribute">
            <summary>
            Attribute that is applicable for implementations of <see cref="T:Microsoft.UpgradeAssistant.Operations.IOperationController"/> and
            specifies when and how the controller should be applied.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.OperationControllerAttribute.Id">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.OperationControllerAttribute.Category">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.OperationControllerAttribute.Traits">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.OperationControllerAttribute.Order">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.IOperationControllerMetadata.Id">
            <summary>
            Unique ID of the controller.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.IOperationControllerMetadata.Category">
            <summary>
            Category of the controller to group them together.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.IOperationControllerMetadata.Traits">
            <summary>
            A traits expression to use when decision is made to use the controller or not for current project context.
            When null, applied for all projects.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.OperationDefinition.NoSliceView">
            <summary>
            When operation controller generates slice by itself via IOperationPropertiesPreprocessor and
            SliceView should not be displayed to the user since there is nothing to change in it.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.OperationDefinition.RootNodeProvider">
            <summary>
            Should always be provided and used to get slice root node to initiate slice crawling.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.OperationDefinition.PropertiesPreprocessors">
            <summary>
            Note: later when needed operation controller could import extensible IOperationPropertiesPreprocessor
            implementations and add its own to that lis when needed. This would allow anyone to extend any kind of
            operations.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.OperationDefinition.Steps">
            <summary>
            Steps for given operation.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.OperationDefinition.Properties">
            <summary>
            Additional optional properties to be passed to the operation properties bag.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Operations.OperationException">
            <summary>
            Exception that we send when something failed during upgrade.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Operations.OperationFinalizerAttribute">
            <summary>
            Attribute that is applicable for implementations of <see cref="T:Microsoft.UpgradeAssistant.Operations.IOperationFinalizer"/> and
            specifies when and how the operation finalizer should be applied.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.OperationFinalizerAttribute.Id">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.OperationFinalizerAttribute.Traits">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.OperationFinalizerAttribute.Order">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.IOperationFinalizerMetadata.Id">
            <summary>
            Unique ID of the finalizer.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.IOperationFinalizerMetadata.Traits">
            <summary>
            A traits expression to use when decision is made to use the finalizer or not for current context.
            When null, applied for all contexts.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Operations.OperationInitializerAttribute">
            <summary>
            Attribute that is applicable for implementations of <see cref="T:Microsoft.UpgradeAssistant.Operations.IOperationInitializer"/> and
            specifies when and how the operation initializer should be applied.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.OperationInitializerAttribute.Id">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.OperationInitializerAttribute.Traits">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.OperationInitializerAttribute.Order">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.IOperationInitializerMetadata.Id">
            <summary>
            Unique ID of the step.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.IOperationInitializerMetadata.Traits">
            <summary>
            A traits expression to use when decision is made to use the initializer or not for current context.
            When null, applied for all contexts.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Operations.OperationLogger">
            <summary>
            A new instance of this implementation of <see cref="T:Microsoft.UpgradeAssistant.Services.ILogger"/> is passed to each
            <see cref="T:Microsoft.UpgradeAssistant.Transformers.ISliceNodeTransformer"/> and helps to keep track of all messages it sends back.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.OperationLogger.LogInfo(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.OperationLogger.LogDebug(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.OperationLogger.LogWarning(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.OperationLogger.LogError(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.OperationLogger.LogMessage(Microsoft.UpgradeAssistant.Operations.OperationMessage)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Operations.OperationMessage">
            <summary>
            This message object is used in aggregation by <see cref="T:Microsoft.UpgradeAssistant.Services.ILogger"/> implementation during operation run.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Operations.OperationNodeFinalizerAttribute">
            <summary>
            Attribute that is applicable for implementations of <see cref="T:Microsoft.UpgradeAssistant.Operations.IOperationNodeFinalizer"/> and
            specifies when and how the operation finalizer should be applied.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.OperationNodeFinalizerAttribute.Id">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.OperationNodeFinalizerAttribute.NodeKind">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.OperationNodeFinalizerAttribute.Traits">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.OperationNodeFinalizerAttribute.Order">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.IOperationNodeFinalizerMetadata.Id">
            <summary>
            Unique ID of the finalizer.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.IOperationNodeFinalizerMetadata.NodeKind">
            <summary>
            Node kind that is applicable for the finalizer.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.IOperationNodeFinalizerMetadata.Traits">
            <summary>
            A traits expression to use when decision is made to use the finalizer or not for current context.
            When null, applied for all contexts.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Operations.OperationResult">
            <summary>
            Result of the whole operation returned back to a host.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Operations.OperationStats">
            <summary>
            Helper to aggregate whole operation results.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Operations.OperationStepAttribute">
            <summary>
            Attribute that is applicable for implementations of <see cref="T:Microsoft.UpgradeAssistant.Operations.IOperationStep"/> and
            specifies when and how the operation step should be applied.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.OperationStepAttribute.Id">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.OperationStepAttribute.Traits">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.OperationStepAttribute.Order">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.IOperationStepMetadata.Id">
            <summary>
            Unique ID of the step..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Operations.IOperationStepMetadata.Traits">
            <summary>
            A traits expression to use when decision is made to use the step or not for current project context.
            When null, applied for all projects.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.ProjectOperationSliceNodeProvider.GetNodeAsync(System.String,Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Operations.RunConfig">
            <summary>
            Schema:
            
            {
              "analysis": {
               "settings": {
                 "binaries": {
                   "useDefaultExclusions": true,
                   "include": [
                   ],
                   "exclude": [
                     "folder/file.*",
                     "file.*",
                     "folder/**/file*"
                   ]
                 }
               },
               "rules": [],
               "analyzers": []
              }
            }
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Operations.SideBySideOperationContext">
            <summary>
            A context object used in the side by side upgrade operation. <see cref="T:Microsoft.UpgradeAssistant.Transformers.ISliceNodeTransformer"/>
            objects are expected to cast to it to get access to both source and target projects.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Operations.SliceNodeState">
            <summary>
            Possible states of a <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/> aggregated after a set of after <see cref="T:Microsoft.UpgradeAssistant.Transformers.ISliceNodeTransformer"/> runs.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Operations.SliceNodeStats">
            <summary>
            Helper to aggregate results for a particular <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/> after all applicable transformers completed.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Operations.SolutionOperationSliceNodeProvider.GetNodeAsync(System.String,Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Operations.UpgradeRunConfig">
            <summary>
            Schema:
            
            {
                "upgrade": {
                    "settings": {
                        "key": object (where object could be value or JsonObject specific to an upgrade operation)
                    }
                }
            }
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Packages.DefaultPackageMapConfigProvider">
            <summary>
            Default package maps applicable to all kinds of projects.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Packages.DefaultPackageMapConfigProvider.GetPackageMapConfigAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Packages.IPackageMapConfigProvider">
            <summary>
            Contract that can returns package upgrade map configs specific to some trait
            expression specified in the attribute registering this contract.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Packages.IPackageMapConfigProvider.GetPackageMapConfigAsync(System.Threading.CancellationToken)">
            <summary>
            Returns package upgrade map configs specific for this provider.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Packages.IPackageMapConfigProviderMetadata.Traits">
            <summary>
            A capabilities expression to use when decision is made to use the provider or not for
            current project context. When null, applied for all projects.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Packages.PackageMap">
            <summary>
             Represents a package transformation map.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Packages.PackageMap.#ctor(Microsoft.UpgradeAssistant.Packages.PackageMapConfig)">
            <summary>
             Initializes a new instance of the <see cref="T:Microsoft.UpgradeAssistant.Packages.PackageMap"/> class with the specified parameters.
            </summary>
            <param name="config"></param>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Packages.PackageMap.Packages">
            <summary>
             Gets the dictionary of mapped packages.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Packages.PackageMap.Patterns">
            <summary>
             Gets the dictionary of mapped patterns.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Packages.FrameworkPackageMapEntry.Name">
            <summary>
            Package name
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Packages.FrameworkPackageMapEntry.Version">
            <summary>
            Package version
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Packages.FrameworkPackageMapEntry.Prerelease">
            <summary>
            Package is in prerelease
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Packages.FrameworkPackageMapEntry.Default">
            <summary>
            The package is the replacement for the old one.
            We can specify a one-to-many package transformation
            but we want to know which is the "main" package
            we wanted to substitute.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Packages.PackageMapConfigProviderAttribute">
            <summary>
            Attribute that is applicable for implementations of <see cref="T:Microsoft.UpgradeAssistant.Packages.IPackageMapConfigProvider"/> and
            specifies when and how the package map config provider should be applied.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Packages.PackageMapConfigProviderAttribute.Traits">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Packages.PackageMapConfigProviderAttribute.Order">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Packages.PackageMaps">
            <summary>
             Provides the ability to load <see cref="T:Microsoft.UpgradeAssistant.Packages.PackageMap"/>s from the embedded resources.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Packages.PackageMaps.LoadFromEmbeddedResource(System.Collections.Generic.IEnumerable{System.String},System.Reflection.Assembly)">
            <summary>
             Loads a <see cref="T:Microsoft.UpgradeAssistant.Packages.PackageMap"/> from the embedded resources.
            </summary>
            <param name="resourceIds">The list of resources to load.</param>
            <param name="assembly">The assembly that contains the embedded resources.</param>
            <returns>The loaded map.</returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.ProjectContext">
            <summary>
            Context for actions that need to execute on a project and need access to <see cref="T:Microsoft.UpgradeAssistant.Services.IServiceCollection"/>.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.ProjectContext.#ctor(Microsoft.UpgradeAssistant.Services.IServiceCollection,Microsoft.UpgradeAssistant.Services.IProject)">
            <summary>
             Initializes a new instance of the <see cref="T:Microsoft.UpgradeAssistant.ProjectContext"/> class with the specified parameters.
            </summary>
            <param name="services">All services available at global or project level scopes.</param>
            <param name="project">The source project.</param>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.ProjectContext.Services">
            <summary>
             Gets all services available at global or project level scopes.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.ProjectContext.Project">
            <summary>
             Gets the source project.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Resources.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.AddingAssemblyReferenceToProject">
            <summary>
              Looks up a localized string similar to Adding assembly reference {0} to project {1}..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.AddingComment">
            <summary>
              Looks up a localized string similar to Adding comment &apos;{0}&apos; from the file &apos;{1}&apos; at position ({2},{3})..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.AddingFileToProject">
            <summary>
              Looks up a localized string similar to Adding file &apos;{0}&apos; to project folder &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.AddingFrameworkReferenceToProject">
            <summary>
              Looks up a localized string similar to Adding framework reference &apos;{0}&apos; to project &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.AddingPackageToProject">
            <summary>
              Looks up a localized string similar to Adding package {0} {1} to project {2}..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.AddingProjectItem">
            <summary>
              Looks up a localized string similar to Adding item &apos;{0} ({1})&apos; to project &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.AddingProjectReferenceToProject">
            <summary>
              Looks up a localized string similar to Adding project reference {0} to project {1}..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.AddingReferenceToProject">
            <summary>
              Looks up a localized string similar to Adding reference &apos;{0}&apos; to project &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.AddingSettingsFilesProperties">
            <summary>
              Looks up a localized string similar to Configuring settings files....
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.AddingUsingNamespaceToFile">
            <summary>
              Looks up a localized string similar to Adding using statement &apos;{0}&apos; to file &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.AddPackageSourceMapping">
            <summary>
              Looks up a localized string similar to Adding package source mapping &apos;{0}&apos; for source &apos;{1}&apos; to &apos;{2}&apos;....
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.AnalysisSettings">
            <summary>
              Looks up a localized string similar to Analysis settings.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.AnalysisSettingsDescription">
            <summary>
              Looks up a localized string similar to What do you want to analyze in the selected projects?.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.AnalyzeBinaries">
            <summary>
              Looks up a localized string similar to Binary dependencies.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.AnalyzeBinariesDescription">
            <summary>
              Looks up a localized string similar to Includes all external binary dependencies of selected projects.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.AnalyzeCode">
            <summary>
              Looks up a localized string similar to Source code and settings.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.AnalyzeCodeDescription">
            <summary>
              Looks up a localized string similar to Includes all your code, configs and settings in selected projects.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.AnalyzingSelectedProjects">
            <summary>
              Looks up a localized string similar to Analyzing selected projects and their dependencies....
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.ApiExistInPackage">
            <summary>
              Looks up a localized string similar to API is available in package {0}..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.ApiHelp">
            <summary>
              Looks up a localized string similar to API documentation.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.ApiNotImplementedComment">
            <summary>
              Looks up a localized string similar to {0} is not yet supported..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.ApiNotImplementedCommentWithUrl">
            <summary>
              Looks up a localized string similar to {0} is not yet supported. For more details see {1}.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.ApiNotImplementedInCommentWithUrl">
            <summary>
              Looks up a localized string similar to {0} is not yet supported in {1}. For more details see {2}.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.ApiRemovedComment">
            <summary>
              Looks up a localized string similar to {0} no longer supported..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.ApiRemovedCommentWithUrl">
            <summary>
              Looks up a localized string similar to {0} is not longer supported. For more details see {1}.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.ApiReplacedComment">
            <summary>
              Looks up a localized string similar to {0} is no longer supported. Use {1} instead..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.ApiReplacedCommentWithUrl">
            <summary>
              Looks up a localized string similar to {0} is no longer supported. Use {1} instead. For more details see {2}.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.ApiSignature">
            <summary>
              Looks up a localized string similar to API signature.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.ApplyingChangesToFile">
            <summary>
              Looks up a localized string similar to Applying changes to file &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.AssemblyName">
            <summary>
              Looks up a localized string similar to Assembly Name.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.AssemblyPublicKey">
            <summary>
              Looks up a localized string similar to Assembly Public Key.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.AssemblyReferenceIsNotCompatible">
            <summary>
              Looks up a localized string similar to Cannot add reference &apos;{0}&apos; to project &apos;{1}&apos; because their target frameworks are incompatible..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.AssemblyVersion">
            <summary>
              Looks up a localized string similar to Assembly Version.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.BreakingChanges">
            <summary>
              Looks up a localized string similar to Breaking changes.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.BuildingProject">
            <summary>
              Looks up a localized string similar to Building project &apos;{0}&apos;....
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.BuildingSolution">
            <summary>
              Looks up a localized string similar to Building solution &apos;{0}&apos;....
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.Cancelled">
            <summary>
              Looks up a localized string similar to Cancelled.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.ChangingProjectTypeGuidInSolutionFile">
            <summary>
              Looks up a localized string similar to Changing project &apos;{0}&apos; type guid in the &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.CodeChangeMessage">
            <summary>
              Looks up a localized string similar to {0} ({1}).
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.CodeFixTitle">
            <summary>
              Looks up a localized string similar to Upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.Column">
            <summary>
              Looks up a localized string similar to Column.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.ConvertingProjectToSdkStyle">
            <summary>
              Looks up a localized string similar to Converting project &apos;{0}&apos; to SDK-style..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.CopiedSourceFileToTarget">
            <summary>
              Looks up a localized string similar to Copied &apos;{0}&apos; to &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.CouldNotFindFile">
            <summary>
              Looks up a localized string similar to Could not find file &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.CouldNotFindFileDocumentInTheWorkspace">
            <summary>
              Looks up a localized string similar to Could not find document for file &apos;{0}&apos; under target project workspace..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.CouldNotFindNewProjectNameInContext">
            <summary>
              Looks up a localized string similar to Could not find new project name in current context..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.CouldNotFindNewProjectTemplateInContext">
            <summary>
              Looks up a localized string similar to Could not find new project template ID in current context..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.CouldNotFindNuGetPackage">
            <summary>
              Looks up a localized string similar to Could not find {0} nuget package matching version &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.CouldNotFindProject">
            <summary>
              Looks up a localized string similar to Could not find project &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.CpmUpgradeDescription">
            <summary>
              Looks up a localized string similar to Convert selected projects to use NuGet central package management (CPM) feature to simplify managing common dependencies across all projects.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.CpmUpgradeName">
            <summary>
              Looks up a localized string similar to NuGet central package management (CPM).
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.CreateProject">
            <summary>
              Looks up a localized string similar to Create project {0}.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.CreatingProject">
            <summary>
              Looks up a localized string similar to Creating project {0}..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.Current">
            <summary>
              Looks up a localized string similar to Current.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.CurrentPackage">
            <summary>
              Looks up a localized string similar to Current package:.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.CurrentTargetFramework">
            <summary>
              Looks up a localized string similar to Current target framework.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.DeprecatedPackage">
            <summary>
              Looks up a localized string similar to Should be replaced..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.Description">
            <summary>
              Looks up a localized string similar to Description.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.DirectoryNotFound">
            <summary>
              Looks up a localized string similar to The following directory was not found: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.DirectoryOrFileAlreadyExists">
            <summary>
              Looks up a localized string similar to Directory or file &apos;{0}&apos; already exist..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.Done">
            <summary>
              Looks up a localized string similar to Done.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.Error_FailedFindNuGetPackage">
            <summary>
              Looks up a localized string similar to Could not find &apos;{0}/{1}&apos; on the configured NuGet feeds.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.ErrorWhileGettingTraitsForProvider">
            <summary>
              Looks up a localized string similar to There was some error while discovering project traits in provider &apos;{0}&apos;: {1}..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.Failed">
            <summary>
              Looks up a localized string similar to Failed.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.FailedToAddAssemblyReferenceToProject">
            <summary>
              Looks up a localized string similar to Failed to add assembly reference &apos;{0}&apos; to project {1}..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.FailedToAddFrameworkReferenceToProject">
            <summary>
              Looks up a localized string similar to Failed to add assembly reference &apos;{0}&apos; to project {1}..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.FailedToAddPackageToProject">
            <summary>
              Looks up a localized string similar to Failed to add package {0} {1} to project {2}..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.FailedToAddProjectReferenceToProject">
            <summary>
              Looks up a localized string similar to Failed to add project reference &apos;{0}&apos; to project {1}..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.FailedToApplyChanges">
            <summary>
              Looks up a localized string similar to Failed to apply changes to file &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.FailedToConvertProjectToSdkStyle">
            <summary>
              Looks up a localized string similar to Failed to convert project &apos;{0}&apos; to SDK-style..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.FailedToCreateNewProject">
            <summary>
              Looks up a localized string similar to Failed to create a new project {0}..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.FailedToLoadApiAndPackageMaps">
            <summary>
              Looks up a localized string similar to Failed to load the API and Package maps from {0} {1}: {2}.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.FailedToLoadBuiltInApiAndPackageMaps">
            <summary>
              Looks up a localized string similar to Failed to load the built-in API and Package maps from &apos;{0}&apos;: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.FailedToParseJson">
            <summary>
              Looks up a localized string similar to Failed to parse JSON file &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.FileChangeMessage">
            <summary>
              Looks up a localized string similar to {0} ({1}).
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.FileDoesNotExist">
            <summary>
              Looks up a localized string similar to File &apos;{0}&apos; does not exist..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.FileNotFoundError">
            <summary>
              Looks up a localized string similar to {0} not found..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.FinalizeOperation">
            <summary>
              Looks up a localized string similar to Finalize upgrade..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.FinalizeProjectDependencies">
            <summary>
              Looks up a localized string similar to Finalize project dependencies.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.FinalizingOperation">
            <summary>
              Looks up a localized string similar to Finalize upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.FoundNuGetPackageVersion">
            <summary>
              Looks up a localized string similar to Found NuGet package {0} v{1}.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.FoundPatternOccurrences">
            <summary>
              Looks up a localized string similar to Found {0} matches of &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.Framework">
            <summary>
              Looks up a localized string similar to Framework.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.GenericAppTemplateDescription">
            <summary>
              Looks up a localized string similar to A project template for creating a new project that targets .NET Standard or .NET..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.GenericAppTemplateName">
            <summary>
              Looks up a localized string similar to Empty Project.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.GenericSliceNodeUpgradeError">
            <summary>
              Looks up a localized string similar to One or more transformations failed while upgrading &apos;{0}&apos;. Check Upgrade Assistant pane in the Output tool window for more details..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.HelpLink">
            <summary>
              Looks up a localized string similar to Help Link.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.IncidentID">
            <summary>
              Looks up a localized string similar to Incident ID.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.IncorrectSolutionFile">
            <summary>
              Looks up a localized string similar to The file &apos;{0}&apos; is not a solution file..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.Information">
            <summary>
              Looks up a localized string similar to Information.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.InitializeOperation">
            <summary>
              Looks up a localized string similar to Initialize upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.InitializeProjectComponents">
            <summary>
              Looks up a localized string similar to Initialize project components.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.InitializingOperation">
            <summary>
              Looks up a localized string similar to Initializing operation....
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.InplaceUpgradeDescription">
            <summary>
              Looks up a localized string similar to Upgrades project and its components in place using transformations applicable for the project..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.InplaceUpgradeName">
            <summary>
              Looks up a localized string similar to In-place project upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.InsertingComment">
            <summary>
              Looks up a localized string similar to Inserting comment &apos;{0}&apos; in file &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.InvalidTraitExpressionWithPosition">
            <summary>
              Looks up a localized string similar to Invalid capability expression at position {0} in the expression &amp;quot;{1}&amp;quot;..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.IssueId">
            <summary>
              Looks up a localized string similar to Issue ID.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.Latest">
            <summary>
              Looks up a localized string similar to Latest.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.LatestSupportedPackageVersionFailed">
            <summary>
              Looks up a localized string similar to Failed to determine the latest supported {1} package version for {0}: {2}.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.Line">
            <summary>
              Looks up a localized string similar to Line.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.LocationKind">
            <summary>
              Looks up a localized string similar to Location Kind.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.LogError">
            <summary>
              Looks up a localized string similar to error: .
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.LogErrorWithId">
            <summary>
              Looks up a localized string similar to error {0}: .
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.LogInfo">
            <summary>
              Looks up a localized string similar to info: .
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.LogWarning">
            <summary>
              Looks up a localized string similar to warning: .
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.LogWarningWithId">
            <summary>
              Looks up a localized string similar to warning {0}: .
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.Mandatory">
            <summary>
              Looks up a localized string similar to Mandatory.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.MessageWithLearnMore">
            <summary>
              Looks up a localized string similar to {0} Learn more: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.MSBuildPathNotSet">
            <summary>
              Looks up a localized string similar to Msbuild was not found..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.New">
            <summary>
              Looks up a localized string similar to New.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.NoSupportedVersionFound">
            <summary>
              Looks up a localized string similar to No supported version found.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.NoTargetProjectFoundInContext">
            <summary>
              Looks up a localized string similar to Invalid operation context, target project was not found..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.NuGetCategoryDescription">
            <summary>
              Looks up a localized string similar to Upgrade NuGet related features in projects.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.NuGetCategoryName">
            <summary>
              Looks up a localized string similar to NuGet upgrades.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.OperationComplete">
            <summary>
              Looks up a localized string similar to Complete: {0} succeeded, {1} failed, {2} skipped..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.Optional">
            <summary>
              Looks up a localized string similar to Optional.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.PackageChangeMessage">
            <summary>
              Looks up a localized string similar to Package {0} version was changed to {1}..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.PackageChangeMessageFromTo">
            <summary>
              Looks up a localized string similar to Package {0} version was changed from {1} to {2}..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.PackageChangeRemovedMessage">
            <summary>
              Looks up a localized string similar to Package reference {0} was removed..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.PackageChangeRemovedMessageWithVersion">
            <summary>
              Looks up a localized string similar to Package reference {0} {1} was removed..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.PackageDoesNotSupportProjectTargetFrameworks">
            <summary>
              Looks up a localized string similar to Package &apos;{0}&apos; does not support target framework(s) &apos;{1}&apos; for project &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.PackageDownloadFailed">
            <summary>
              Looks up a localized string similar to Failed to download version {0} of the {1} package: {2}.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.PackageIsPartOfFramework">
            <summary>
              Looks up a localized string similar to Package functionality included with new framework reference.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.Path">
            <summary>
              Looks up a localized string similar to Path.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.Potential">
            <summary>
              Looks up a localized string similar to Potential.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.ProjectFilesRuleTitle">
            <summary>
              Looks up a localized string similar to Found {0} files matching the rule:.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.ProjectPath">
            <summary>
              Looks up a localized string similar to Project Path.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.ProjectReferenceIsNotCompatible">
            <summary>
              Looks up a localized string similar to Cannot add reference &apos;{0}&apos; to project &apos;{1}&apos; because its target framework is incompatible. It is recommended that you upgrade &apos;{0}&apos; project. You can upgrade it in Visual Studio using Upgrade Project context menu command on a project node in the Solution Explorer..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.ProjectReferenceIsNotCompatiblePart1">
             <summary>
               Looks up a localized string similar to Cannot add reference &apos;{0}&apos; to project &apos;{1}&apos; because its target framework is incompatible.
            
            It is recommended that you upgrade &apos;{0}&apos; project via.
             </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.ProjectReferenceIsNotCompatiblePart2">
            <summary>
              Looks up a localized string similar to command .
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.ProjectReferenceUpgradeToProject">
            <summary>
              Looks up a localized string similar to Project reference &apos;{0}&apos; is incompatible to project &apos;{1}&apos;, however incremental upgrade to a compatible project &apos;{2}&apos; was detected..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.Properties">
            <summary>
              Looks up a localized string similar to Properties.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.Recommendation">
            <summary>
              Looks up a localized string similar to Recommendation:.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.RecommendedTargetFramework">
            <summary>
              Looks up a localized string similar to Recommended target framework.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.RemovingArgument">
            <summary>
              Looks up a localized string similar to Removing argument &apos;{0}&apos; from the file &apos;{1}&apos; at position ({2},{3})..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.RemovingAssemblyReferenceFromProject">
            <summary>
              Looks up a localized string similar to Removing assembly reference &apos;{0}&apos; from project &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.RemovingAttribute">
            <summary>
              Looks up a localized string similar to Removing attribute &apos;{0}&apos; from the file &apos;{1}&apos; at position ({2},{3})..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.RemovingDirectory">
            <summary>
              Looks up a localized string similar to Removing directory &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.RemovingFile">
            <summary>
              Looks up a localized string similar to Removing file &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.RemovingFrameworkReferenceFromProject">
            <summary>
              Looks up a localized string similar to Removing framework reference &apos;{0}&apos; from project &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.RemovingFromFile">
            <summary>
              Looks up a localized string similar to Removing {0} from the file &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.RemovingFromFileAtPosition">
            <summary>
              Looks up a localized string similar to Removing {0} from the file &apos;{1}&apos; at position ({2},{3})..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.RemovingProjectPackage">
            <summary>
              Looks up a localized string similar to Removing package &apos;{0}&apos; from project &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.RemovingProjectPackageWithVersion">
            <summary>
              Looks up a localized string similar to Removing package &apos;{0}&apos; &apos;{1}&apos; from project &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.RemovingProjectProperty">
            <summary>
              Looks up a localized string similar to Removing property &apos;{0}&apos; from project &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.RemovingProjectReferenceFromProject">
            <summary>
              Looks up a localized string similar to Removing project reference &apos;{0}&apos; from project &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.RenamingFile">
            <summary>
              Looks up a localized string similar to Renaming file &apos;{0}&apos; to &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.ReplacedWith">
            <summary>
              Looks up a localized string similar to Replaced with.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.ReplacementPackage">
            <summary>
              Looks up a localized string similar to Replacement:.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.ReplacingAttribute">
            <summary>
              Looks up a localized string similar to Replacing attribute &apos;{0}&apos; with &apos;{1}&apos; in the file &apos;{2}&apos; at position ({3},{4})..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.ReplacingIdentifierInFile">
            <summary>
              Looks up a localized string similar to Replacing identifier &apos;{0}&apos; with &apos;{1}&apos; in the file &apos;{2}&apos; at position ({3},{4})..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.ReportNameCanNotContainIllegalChars">
            <summary>
              Looks up a localized string similar to Report name cannot contain invalid path characters..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.ResolvedIncident">
            <summary>
              Looks up a localized string similar to Resolved incident {0}.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.RestoreProject">
            <summary>
              Looks up a localized string similar to Restoring packages for &apos;{0}&apos;....
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.RunningTransformer">
            <summary>
              Looks up a localized string similar to {0}.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.RunningTransformerWithRetry">
            <summary>
              Looks up a localized string similar to Retry {0}.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.SaveToCsv">
            <summary>
              Looks up a localized string similar to Save as CSV.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.SaveToHtml">
            <summary>
              Looks up a localized string similar to Save as HTML.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.SaveToJson">
            <summary>
              Looks up a localized string similar to Save as JSON.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.SdkStyleUpgradeDescription">
            <summary>
              Looks up a localized string similar to Convert MSBuild project files to the SDK-style to enhance tooling capabilities and inner loop development. Notice that not all project flavors are supported in SDK-style by default and additional manual refactoring of the project file might be needed..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.SdkStyleUpgradeName">
            <summary>
              Looks up a localized string similar to Convert project to SDK-style.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.SettingProjectProperty">
            <summary>
              Looks up a localized string similar to Setting property &apos;{0}&apos; to &apos;{1}&apos; for project &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.Severity">
            <summary>
              Looks up a localized string similar to Severity.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.ShouldUpgradeToSdkStyle">
            <summary>
              Looks up a localized string similar to Convert projects to SDK-style.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.ShouldUseTransitivePinning">
            <summary>
              Looks up a localized string similar to Enable transitive pinning.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.SideBySideUpgradeDescription">
            <summary>
              Looks up a localized string similar to Upgrades project and its components in a copy project using transformations applicable for the project..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.SideBySideUpgradeName">
            <summary>
              Looks up a localized string similar to Side-by-side project upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.Skipped">
            <summary>
              Looks up a localized string similar to Skipped.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.SkippingSourceFileCopy">
            <summary>
              Looks up a localized string similar to Skipping copying source file &apos;{0}&apos; because it already exists in target project: &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.SliceRootEmpty">
            <summary>
              Looks up a localized string similar to Unable to produce slice for current operation..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.Snippet">
            <summary>
              Looks up a localized string similar to Snippet.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.SourceFileDoesNotExist">
            <summary>
              Looks up a localized string similar to Source file &apos;{0}&apos; does not exist or does not belong to source project..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.StartingProcess">
            <summary>
              Looks up a localized string similar to Starting process &apos;{0} {1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.StartUpgradeOperation">
            <summary>
              Looks up a localized string similar to Starting upgrade of selected nodes for {0}....
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.State">
            <summary>
              Looks up a localized string similar to State.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.StoryPoints">
            <summary>
              Looks up a localized string similar to Story Points.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.Succeeded">
            <summary>
              Looks up a localized string similar to Succeeded.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.TemplateNotFound">
            <summary>
              Looks up a localized string similar to Project template &apos;{0}&apos; was not found..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.TimeSpanHour">
            <summary>
              Looks up a localized string similar to {0} hour.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.TimeSpanHours">
            <summary>
              Looks up a localized string similar to {0} hours.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.TimeSpanMinute">
            <summary>
              Looks up a localized string similar to {0} minute.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.TimeSpanMinutes">
            <summary>
              Looks up a localized string similar to {0} minutes.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.TimeSpanSecond">
            <summary>
              Looks up a localized string similar to {0} second.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.TimeSpanSeconds">
            <summary>
              Looks up a localized string similar to {0} seconds.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.ToolEndedWithErrors">
            <summary>
              Looks up a localized string similar to {0} exited with errors..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.ToolEndedWithNonSuccessCode">
            <summary>
              Looks up a localized string similar to {0} exited with non-success code: {1}..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.Traits">
            <summary>
              Looks up a localized string similar to Traits.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.UnknownPackageOrMissingFeed">
            <summary>
              Looks up a localized string similar to Package {0} with version {1} could not be found in any discovered NuGet feeds. Are you missing a private feed in your Visual Studio or in a NuGet.config?.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.UnknownTraitToken">
            <summary>
              Looks up a localized string similar to Unknown trait token &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.UnsupportedPackage">
            <summary>
              Looks up a localized string similar to Unable to find version of NuGet package that supports all project target frameworks..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.UpdatingIdentifierInFile">
            <summary>
              Looks up a localized string similar to Updating identifier &apos;{0}&apos; in the file &apos;{1}&apos; at position ({2},{3})..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.UpdatingMemberInFile">
            <summary>
              Looks up a localized string similar to Updating type member &apos;{0}&apos; in the file &apos;{1}&apos; at position ({2},{3})..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.UpdatingNamespaceInFile">
            <summary>
              Looks up a localized string similar to Updating namespace &apos;{0}&apos; in the file &apos;{1}&apos; at position ({2},{3})..
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.UpgradeCode">
            <summary>
              Looks up a localized string similar to Apply code transformations.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.UpgradeFeatureCategoryDescription">
            <summary>
              Looks up a localized string similar to Upgrade selected project features without changing whole project and its target framework.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.UpgradeFeatureCategoryName">
            <summary>
              Looks up a localized string similar to Other project features.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.UpgradeFrameworkCategoryDescription">
            <summary>
              Looks up a localized string similar to Upgrade .NET Framework or .NET applications to newer .NET versions, bringing its cross-platform, high-performance capabilities to your product.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.UpgradeFrameworkCategoryName">
            <summary>
              Looks up a localized string similar to Upgrade project to a newer .NET version.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.UpgradeProject">
            <summary>
              Looks up a localized string similar to Upgrade project.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.UpgradeProjectDependencies">
            <summary>
              Looks up a localized string similar to Upgrade project dependencies.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.UpgradingNode">
            <summary>
              Looks up a localized string similar to {0} {1}....
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.UsingExtension">
            <summary>
              Looks up a localized string similar to Using extension {0} from {1}.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.UsingMappingsDirectory">
            <summary>
              Looks up a localized string similar to Using API and package mappings from {0}.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Resources.Strings.WebSdkStyleUpgradeDescription">
            <summary>
              Looks up a localized string similar to Convert MSBuild project files to the SDK-style to enhance tooling capabilities and inner loop development. Notice that ASP.NET .NET Framework projects are not supported by default in SDK-style and manual project file refactoring would still be needed (for example adding capabilities like DotNetCoreWeb and SupportsSystemWeb to enable some tooling experience etc)..
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IApiCatalogService.GetApiAvailabilityAsync(System.Guid,System.Collections.Generic.IEnumerable{Microsoft.UpgradeAssistant.Services.ApiFramework},System.Threading.CancellationToken)">
            <summary>
            Returns specified API availability information for each requested target frameworks.
            </summary>
            <param name="apiId"></param>
            <param name="frameworks"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IApiCatalogService.InitializeAsync(System.Threading.CancellationToken)">
            <summary>
            Initializes the API catalog service.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.AssemblyBinaryScanner">
            <summary>
            Runs specified visitors for a given assembly, its types and their parts.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.BinaryContext">
            <summary>
            Passed to visitors to let them cache some data during scanning an assembly.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.BinaryService">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.BinaryService.VisitAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.UpgradeAssistant.Services.BinaryVisitor},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.BinaryService.VisitAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.UpgradeAssistant.Services.BinaryVisitor},Microsoft.UpgradeAssistant.Services.IBinaryValidator,Microsoft.UpgradeAssistant.Services.IBinaryErrorHandler,Microsoft.UpgradeAssistant.Services.IBinaryFinalizer,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.BinaryService.VisitAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Microsoft.UpgradeAssistant.Services.BinaryVisitor},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.BinaryService.VisitAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Microsoft.UpgradeAssistant.Services.BinaryVisitor},Microsoft.UpgradeAssistant.Services.IBinaryValidator,Microsoft.UpgradeAssistant.Services.IBinaryErrorHandler,Microsoft.UpgradeAssistant.Services.IBinaryFinalizer,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.DocumentIdBuilder">
            <summary>
            Build documentation comment ID for this spec: 
                https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/documentation-comments#id-string-format
            from Mono.Cecil objects.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.DocumentIdBuilder.MakeNonGenericType(System.String)">
            <summary>
            Cecil full generic type name already has `N at the end, some times we need to strip it.
            </summary>
            <param name="genericTypeFullName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.ApiMapService">
            <summary>
            Provides ApiMap entries applicable to specified context.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ApiMapService.GetApiMapEntriesAsync(Microsoft.UpgradeAssistant.SliceContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.IApiMapService">
            <summary>
            Provides ApiMap entries applicable for specified context.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IApiMapService.GetApiMapEntriesAsync(Microsoft.UpgradeAssistant.SliceContext,System.Threading.CancellationToken)">
            <summary>
            Provides ApiMap entries applicable for specified context.
            </summary>
            <param name="context"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.ICodeService">
            <summary>
            Host specific service that provides access to Roslyn workspace.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ICodeService.GetWorkspaceAsync(System.Threading.CancellationToken)">
            <summary>
            Returns current Roslyn workspace object.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ICodeService.TryApplyChangesAsync(Microsoft.CodeAnalysis.Solution,System.Threading.CancellationToken)">
            <summary>
            Attempts to apply changes to current Roslyn workspace and returns true if it was successful.
            </summary>
            <param name="solution"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ICodeService.ReloadWorkspaceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Reloads Roslyn workspace.
            </summary>
            <param name="projectPath"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.EnvironmentService">
            <summary>
            Wrapper over System.Environment abstraction for unit testing.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.EnvironmentService.CurrentDirectory">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.EnvironmentService.OS">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.EnvironmentService.Is64BitOperatingSystem">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.EnvironmentService.Is64BitProcess">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.EnvironmentService.UserProfilePath">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.EnvironmentService.DomainName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.EnvironmentService.NugetCachePath">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.EnvironmentService.DotnetUserProfilePath">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.EnvironmentService.GetMachineName">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.EnvironmentService.GetEnvironmentVariable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.EnvironmentService.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.EnvironmentService.GetFolderPath(System.Environment.SpecialFolder)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.EnvironmentService.ExpandEnvironmentVariables(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.EnvironmentService.GetMacAddress">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.ExtensionAttribute">
            <summary>
            Attribute that is applicable for implementations of <see cref="T:Microsoft.UpgradeAssistant.Services.IExtension"/> and
            specifies when and how the extension should be used.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.ExtensionAttribute.Id">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.ExtensionAttribute.Traits">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.ExtensionAttribute.Order">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ExtensionBase.InstallUpdatesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ExtensionsManager.GetExtensionPathAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ExtensionsManager.InitializeExtensionsAsync(Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ExtensionsManager.GetTraitProviders(Microsoft.UpgradeAssistant.ProjectContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ExtensionsManager.GetTemplates(Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ExtensionsManager.GetNodeProviders(Microsoft.UpgradeAssistant.SliceContext,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ExtensionsManager.GetFilters(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ExtensionsManager.GetTransformers(Microsoft.UpgradeAssistant.SliceContext,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ExtensionsManager.GetValidators(Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ExtensionsManager.GetInitializers(Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ExtensionsManager.GetFinalizers(Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ExtensionsManager.GetNodeFinalizers(Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ExtensionsManager.GetBuilder(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ExtensionsManager.GetBuilders(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ExtensionsManager.GetNodeAdjusters(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ExtensionsManager.GetTargetFrameworksAsync(Microsoft.UpgradeAssistant.Services.IProject,Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ExtensionsManager.GetOperationControllers(Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ExtensionsManager.GetOperationControllers(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ExtensionsManager.GetOperationStep(Microsoft.UpgradeAssistant.Operations.OperationStepDefinition,Microsoft.UpgradeAssistant.Traits.ITraitsSet)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.IExtension">
            <summary>
            Contract that represents an extension that was not shipped with UA and should be downloaded 
            on user machine separately. MOst common case now is when we have some assets we need to get from NuGet.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IExtension.InstallUpdatesAsync(System.Threading.CancellationToken)">
            <summary>
            Checks and installs updates when they are available.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IExtension.GetRootPathAsync(System.Threading.CancellationToken)">
            <summary>
            Returns root install folder path for this extension. Consumers of extension's assets would 
            know their relative paths.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.IExtensionMetadata.Id">
            <summary>
            Unique ID of the extension.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.IExtensionMetadata.Traits">
            <summary>
            A traits expression to use when decision is made to use the provider or not for
            current project context. When null, applied for all projects.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.IExtensionsManager">
            <summary>
            Discovers all extensible contracts in all known locations and lazily returns corresponding entities.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IExtensionsManager.GetExtensionPathAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns path to the root folder for extension with specified Id.
            </summary>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IExtensionsManager.InitializeExtensionsAsync(Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Threading.CancellationToken)">
            <summary>
            Initializes extensions that match specified traits.
            </summary>
            <param name="traits"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IExtensionsManager.GetTraitProviders(Microsoft.UpgradeAssistant.ProjectContext,System.Threading.CancellationToken)">
            <summary>
            Returns all <see cref="T:Microsoft.UpgradeAssistant.Traits.ITraitProvider"/> implementations applicable to given context.
            </summary>
            <param name="context"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IExtensionsManager.GetNodeProviders(Microsoft.UpgradeAssistant.SliceContext,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns all available <see cref="T:Microsoft.UpgradeAssistant.Nodes.ISliceNodeProvider"/> implementations for given kind.
            </summary>
            <param name="context"></param>
            <param name="language"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IExtensionsManager.GetFilters(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns all available <see cref="T:Microsoft.UpgradeAssistant.Filters.ISliceFilter"/> implementations for given kind.
            </summary>
            <param name="kind"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IExtensionsManager.GetTransformers(Microsoft.UpgradeAssistant.SliceContext,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns all available ordered <see cref="T:Microsoft.UpgradeAssistant.Transformers.ISliceNodeTransformer"/> implementations for given operation and language.
            </summary>
            <param name="context"></param>
            <param name="language"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IExtensionsManager.GetValidators(Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Threading.CancellationToken)">
            <summary>
            Returns all available ordered <see cref="T:Microsoft.UpgradeAssistant.Nodes.ISliceNodeValidator"/> implementations for given operation.
            </summary>
            <param name="traits"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IExtensionsManager.GetBuilder(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.UpgradeAssistant.Nodes.ISliceNodeBuilder"/> for given kind if it is available.
            If it is not available returns null.
            </summary>
            <param name="kind"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IExtensionsManager.GetBuilders(System.Threading.CancellationToken)">
            <summary>
            Returns all available <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/> builders.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IExtensionsManager.GetNodeAdjusters(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns all available ordered <see cref="T:Microsoft.UpgradeAssistant.Nodes.ISliceNodeAdjuster"/> implementations for given kind.
            </summary>
            <param name="kind"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IExtensionsManager.GetTemplates(Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Threading.CancellationToken)">
            <summary>
            Returns a list of applicable templates that could be used to create a new side-by-side project for upgrade operation.
            </summary>
            <param name="traits"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IExtensionsManager.GetTargetFrameworksAsync(Microsoft.UpgradeAssistant.Services.IProject,Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Threading.CancellationToken)">
            <summary>
            Returns compatible target frameworks for given project traits.
            </summary>
            <param name="project"></param>
            <param name="traits"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IExtensionsManager.GetOperationControllers(System.Threading.CancellationToken)">
            <summary>
            Returns all available operation controllers.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IExtensionsManager.GetOperationControllers(Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Threading.CancellationToken)">
            <summary>
            Returns all applicable <see cref="T:Microsoft.UpgradeAssistant.Operations.IOperationController"/> for given traits.
            </summary>
            <param name="traits"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IExtensionsManager.GetOperationStep(Microsoft.UpgradeAssistant.Operations.OperationStepDefinition,Microsoft.UpgradeAssistant.Traits.ITraitsSet)">
            <summary>
            Returns an <see cref="T:Microsoft.UpgradeAssistant.Operations.IOperationStep"/> contract for given step definition.
            </summary>
            <param name="definition"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IExtensionsManager.GetInitializers(Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Threading.CancellationToken)">
            <summary>
            Returns all <see cref="T:Microsoft.UpgradeAssistant.Operations.IOperationInitializer"/> implementations applicable to specified traits.
            </summary>
            <param name="traits"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IExtensionsManager.GetFinalizers(Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Threading.CancellationToken)">
            <summary>
            Returns all <see cref="T:Microsoft.UpgradeAssistant.Operations.IOperationFinalizer"/> implementations applicable to specified traits.
            </summary>
            <param name="traits"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IExtensionsManager.GetNodeFinalizers(Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Threading.CancellationToken)">
            <summary>
            Returns all <see cref="T:Microsoft.UpgradeAssistant.Operations.IOperationNodeFinalizer"/> implementations applicable to specified traits.
            </summary>
            <param name="traits"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.FileSystem">
            <summary>
            The default implementation of <see cref="T:Microsoft.UpgradeAssistant.Services.IFileSystem"/>
            used by product code. This just makes calls to methods in System.IO
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.FileSystem.FileExists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.FileSystem.DirectoryExists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.FileSystem.CreateDirectory(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.FileSystem.DeleteDirectory(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.FileSystem.ReadAllText(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.FileSystem.WriteAllText(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.FileSystem.ReadAllLines(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.FileSystem.WriteAllLines(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.FileSystem.OpenFileStream(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.FileSystem.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.FileSystem.EnumerateFiles(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.FileSystem.EnumerateFileSystemEntries(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.FileSystem.DeleteFile(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.FileSystem.CopyFile(System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.FileSystem.GetTempPath">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.FileSystem.GetLastWriteTime(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.FileSystem.SetLastWriteTime(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.FileSystem.GetFileVersion(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.FileSystem.GetAssemblyVersion(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.IFileSystem">
            <summary>
             A wrapper interface to be used for all file system related operations for easy unit testing.
             Any component that does some file system operations should only talk to this interface but not directly
             to System.IO implementations. Unit tests can then provide a mock implementation of
             this interface for testing that component.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.HostService.GetInstallationPath">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.HostService.GetEnvironmentVariablesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.IEnvironmentVariableProvider">
            <summary>
            Provides custom environment variables.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IEnvironmentVariableProvider.GetEnvironmentVariablesAsync(System.Threading.CancellationToken)">
            <summary>
            Returns environment variables to be set in current process.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.IHostService">
            <summary>
            Abstracts out host properties. Host represents a tool running a the moment: VS, CLI etc.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IHostService.GetInstallationPath">
            <summary>
            Returns host installation directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IHostService.GetEnvironmentVariablesAsync(System.Threading.CancellationToken)">
            <summary>
            Returns host specific environment variables to be set in current process.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.IUniqueIdService">
            <summary>
            Abstracts out generation of unique IDs.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IUniqueIdService.GetNewId(System.Object)">
            <summary>
            Returns a random new unique ID. Default implementation would return a GUID string, 
            tests would be able to override this to return a fixed value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.UniqueIdService">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.UniqueIdService.SetInstance(Microsoft.UpgradeAssistant.Services.IUniqueIdService)">
            <summary>
            Allows tests to set the instance to a mock implementation.
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.UniqueIdService.GetNewId(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.IMappingsService">
            <summary>
            Contract that can download the latest package and API mappings.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.IService">
            <summary>
            A marker interface that each plugable service shared through <see cref="T:Microsoft.UpgradeAssistant.Services.IServiceCollection"/> should implement.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.IServiceCollection">
             <summary>
             A simple service discovery mechanism to plug in host specific services to logic around <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/>
             discovery, analysis and transformation. There are could be services that are not host specific and they live
             in this assembly, however are also shared with operations contexts via this collection to have single discovery
             point for all helper API that are accessible to extenders.
            
             Examples for required services are <see cref="T:Microsoft.UpgradeAssistant.Services.ICodeService"/> and <see cref="T:Microsoft.UpgradeAssistant.Services.IProjectService"/> which provide
             support for host specific access to Roslyn and project/NuGet management API.
             
             The reason for not using .Net Core service collection is that the implementation is really small and we don't
             have to reference and ship .Net Core assemblies which cannot be directly referenced in VS now and would need a
             proxy overhead.
             </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IServiceCollection.AddService``1(``0)">
            <summary>
            Adds a service of a generic type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IServiceCollection.AddService(System.Type,Microsoft.UpgradeAssistant.Services.IService)">
            <summary>
            Adds a service of given type.
            </summary>
            <param name="type"></param>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IServiceCollection.GetService``1">
            <summary>
            Returns a service of given generic type T.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IServiceCollection.GetService(System.Type)">
            <summary>
            Returns a service of a given type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.IJsonService">
            <summary>
            Abstracts out JSON manipulation API.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IJsonService.OpenFile(System.String)">
            <summary>
            Opens specified json file and returns a helper <see cref="T:Microsoft.UpgradeAssistant.Services.JsonFile"/> object.
            If anything was wrong, return null.
            </summary>
            <param name="path"></param>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.JsonFile">
            <summary>
            Helper that knows how to operate on a json file, modify its contents and store changes on disk.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.JsonFile.AnyChanges">
            <summary>
            Is true if there were any unsaved changes made to this file.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.JsonFile.AddObject(System.String,System.Boolean)">
            <summary>
            Adds element on top of specified key.
            </summary>
            <param name="key"></param>
            <param name="elementName"></param>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.JsonFile.SetValue(System.String,System.Object,System.Boolean)">
            <summary>
            Attempts to set specified key and value. If it was already present in the file,
            only writes it if overwrite = true.
            Returns true if it was able to set the key, returns false if no changes were made.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="overwrite"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.JsonFile.GetValue``1(System.String)">
            <summary>
            Returns specified key's value or null if key is not found.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.JsonFile.HasValue(System.String)">
            <summary>
            Returns true if specified key exists.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.JsonFile.GetObject(System.String)">
            <summary>
            Returns specified key's value or null if key is not found.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.JsonFile.GetNodes(System.String)">
             <summary>
             Key could contain a ** token in the path and it means that we should expand all
             children of preceding element and continue searching for reminder of the key under each of that child.
            
             For example, for key "xxx\**\yyy" we could return:
                 
                 - xxx\aaa\yyy
                 - xxx\bbb\yyy
                 - xxx\ccc\yyy
             </summary>
             <param name="key"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.JsonFile.Remove(System.String)">
            <summary>
            Removes specified key if it is present.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.JsonFile.Save">
            <summary>
            If there any changes, saves changes to the file on disk and return true.
            If there no changes does nothing and returns false.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.JsonService">
            <inheritdoc />
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.UpgradeAssistant.Services.LocalCache.Path" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.UpgradeAssistant.Services.LocalCache.Get(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.UpgradeAssistant.Services.LocalCache.Set(System.String,System.Object)" -->
        <member name="T:Microsoft.UpgradeAssistant.Services.ILogger">
            <summary>
            A new instance of a logger is passed to each <see cref="T:Microsoft.UpgradeAssistant.Transformers.ISliceNodeTransformer"/> and accumulates
            messages from that particular transformer run to report to the on-going operation
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.NullLogger">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.NullLogger.LogInfo(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.NullLogger.LogWarning(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.NullLogger.LogError(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.NullLogger.LogDebug(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.NullLogger.LogMessage(Microsoft.UpgradeAssistant.Operations.OperationMessage)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.IAzureArtifactsCredentialsProviderLocator">
            <summary>
             Provides the ability to locate Azure Artifacts credentials provider executable.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IAzureArtifactsCredentialsProviderLocator.LocateExecutableAsync(System.Threading.CancellationToken)">
            <summary>
             Attempts to locate the Azure Artifacts CredentialProvider installation and the executable.
             (see https://github.com/Microsoft/artifacts-credprovider)
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The full path to the located executable; <see langword="null"/>, otherwise.</returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.INuGetCredentialsProvider">
            <summary>
             Provides the ability to obtain credentials for NuGet sources.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.INuGetCredentialsProvider.GetCredentialsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
             Provides credentials for the specified NuGet source.
            </summary>
            <param name="packageSource">The NuGet source to get credentials for.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
             The acquired credentials, if applicable to the provided NuGet source; <see langword="null"/>, otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.INuGetCredentialsProvider.SupportsPackageSource(System.String)">
            <summary>
             Checks if the provider can facilitate credentials for the given package source.
            </summary>
            <param name="packageSource">The NuGet source to get credentials for.</param>
            <returns>
             <see langword="true"/> if the provider can facilitate credentials for the given package source; <see langword="false"/>, otherwise.
            </returns>
            <remarks>This method should be invoked before <see cref="M:Microsoft.UpgradeAssistant.Services.INuGetCredentialsProvider.GetCredentialsAsync(System.String,System.Threading.CancellationToken)"/>.</remarks>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.INuGetService.Parse(System.String)">
            <summary>
            Parses target framework string and returns TargetFramework object. 
            Returns null if there was an error during parsing.
            </summary>
            <param name="tfm"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.INuGetService.CompareVersions(System.String,System.String)">
            <summary>
            Compares two semantic versions and returns int result similar to IComparer.
            In some cases (for example under project access locks) synchronous calls to
            ServiceHub services are not possible use async version of this method there instead.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.INuGetService.CompareVersionsAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Compares two semantic versions and returns int result similar to IComparer.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.INuGetService.AreTargetFrameworksCompatibleAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Returns true if specified set of target frameworks is compatible with given project target frameworks.
            All frameworks should be compatible.
            </summary>
            <param name="sourceTargetFrameworks"></param>
            <param name="referenceTargetFrameworks"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.INuGetService.GetNearestTargetFrameworkAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Given project's target framework and a collection of other target frameworks returns a target framework
            from teh collection that is closest to the project target framework.
            </summary>
            <param name="sourceTargetFramework"></param>
            <param name="otherTargetFrameworks"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.INuGetService.DoesPackageSupportTargetFrameworksAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Returns true if package supports all specified target frameworks.
            </summary>
            <param name="packageName"></param>
            <param name="version"></param>
            <param name="targetFrameworks"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.INuGetService.GetLatestSupportedPackageVersionAsync(System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.UpgradeAssistant.Services.PackageSearchOptions,System.Threading.CancellationToken)">
            <summary>
             Retrieves the latest package version that supports given set of target frameworks.
            </summary>
            <param name="packageName">The package name to search for.</param>
            <param name="targetFrameworks">The target frameworks the package is compatible with.</param>
            <param name="options"></param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
             The latest package version that supports given set of target frameworks;
             or <see langword="null"/> if unable to find supported version.
            </returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.INuGetService.CanFindPackageAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns true if the package with the given name and version can be found in the NuGet sources.
            </summary>
            <param name="packageName"></param>
            <param name="version"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.INuGetService.GetSupportedPackageVersionsAsync(System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.UpgradeAssistant.Services.PackageSearchOptions,System.String,System.Threading.CancellationToken)">
            <summary>
             Retrieves all available package versions that supports given set of target frameworks.
            </summary>
            <param name="packageName">The package name to search for.</param>
            <param name="targetFrameworks">The target frameworks the package is compatible with.</param>
            <param name="options"></param>
            <param name="currentVersion"></param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The collection of package versions that supports given set of target frameworks.</returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.INuGetService.GetPackageMetadataAsync(System.String,System.String,Microsoft.UpgradeAssistant.Services.PackageSearchOptions,System.Threading.CancellationToken)">
            <summary>
            Returns NuGet package metadata for given package name and version.
            </summary>
            <param name="packageName"></param>
            <param name="version"></param>
            <param name="options"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.INuGetService.DownloadPackageAsync(System.String,System.String,Microsoft.UpgradeAssistant.Services.PackageSearchOptions,System.Threading.CancellationToken)">
            <summary>
            Downloads package to default NuGet cache folder.
            Returns package folder path if succeeded, null otherwise.
            </summary>
            <param name="packageName"></param>
            <param name="version"></param>
            <param name="options"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.INuGetService.DownloadPackageAsync(System.String,System.String,System.String,Microsoft.UpgradeAssistant.Services.PackageSearchOptions,System.Threading.CancellationToken)">
            <summary>
            Downloads specified package to a folder if it was not downloaded yet. If folder is not specified downloads to default NuGet cache.
            Returns package folder path if succeeded, null otherwise.
            </summary>
            <param name="packageName"></param>
            <param name="version"></param>
            <param name="path"></param>
            <param name="options"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.INuGetService.GetLatestDownloadedPackagePathAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns path to package folder with highest version. If versionPattern is specified uses it to filter out package versions.
            versionPattern format "1.0.*" where * should be at the end.
            </summary>
            <param name="name"></param>
            <param name="versionPattern"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.INuGetService.GetDowngradedPackageVersionsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns a list of packages and their version that had been downgraded in the project (as specified in the given project.assets.json file.
            </summary>
            <param name="projectAssetsPath"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.IPackageMapService">
            <summary>
            Returns packages upgrade map specific to some trait expression.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IPackageMapService.GetPackageMapAsync(Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Threading.CancellationToken)">
            <summary>
            Returns packages upgrade map specific for specified context.
            </summary>
            <param name="traits"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.NuGetPackageSourceCredentials">
            <summary>
             Represents credentials required to authenticate user within package source web requests.
            </summary>
            <remarks>
             This class is a double for <c>PackageSourceCredential</c> from NuGet.Configuration package. 
            </remarks>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.NuGetPackageSourceCredentials.#ctor(System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
             Initializes <see cref="T:Microsoft.UpgradeAssistant.Services.NuGetPackageSourceCredentials"/> with the provided information.
            </summary>
            <param name="source">The NuGet source the credential is applicable to.</param>
            <param name="username">The user name.</param>
            <param name="passwordText">The password or the personal access token. May be encrypted.</param>
            <param name="isPasswordClearText">Hints if password provided in clear text.</param>
            <param name="validAuthenticationTypesText">
             Comma-delimited list of authentication types the credential is valid for as stored
             in the config file. If <see langword="null"/> or empty, all authentication types are valid.
             Example: <c>basic,negotiate</c>
            </param>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.NuGetPackageSourceCredentials.Source">
            <summary>
             Get the NuGet source the credential is applicable to.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.NuGetPackageSourceCredentials.UserName">
            <summary>
             The user name.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.NuGetPackageSourceCredentials.PasswordText">
            <summary>
             The password or the personal access token. May be encrypted.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.NuGetPackageSourceCredentials.IsPasswordClearText">
            <summary>
             Indicates if password is stored in clear text.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.NuGetPackageSourceCredentials.ValidAuthenticationTypesText">
            <summary>
             Comma-delimited list of authentication types the credential is valid for as stored
             in the config file. If <see langword="null"/> or empty, all authentication types are valid.
             Example: <c>basic,negotiate</c>
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.NuGetSettings.RootPath">
            <summary>
            A solution/repo root or other local path to be used as a root for looking up nuget.config
            files by NuGet logic to calculate NuGet runtime configuration.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.NuGetSettings.PackageSources">
            <summary>
            Specifies NuGet package sources to use in addition to other discovered sources.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.NuGetSettings.PackageSourcesCredentials">
            <summary>
             Gets the list of applicable credentials for the discovered NuGet package sources.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.NuGetSettings.CachePath">
            <summary>
            Specifies custom local cache path specific to user machine. By default NuGet API know
            how to find default NuGet cache path under user's local folder.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.PackageMapService">
            <summary>
            Returns packages upgrade map specific to some trait expression.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.PackageMapService.GetPackageMapAsync(Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Threading.CancellationToken)">
            <summary>
            Returns packages upgrade map specific for specified context.
            </summary>
            <param name="traits"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.PackageSearchOptions.Prerelease">
            <summary>
            Gets a value indicating whether to search for prerelease versions.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.PackageSearchOptions.VersionPattern">
            <summary>
            Version pattern should end with *. If specified it would be matched during
            search and latest version matching pattern would be returned.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.PackageSearchOptions.Unlisted">
            <summary>
            Gets a value indicating whether to search for unlisted packages.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.PackageSearchOptions.LatestMinorAndBuildOnly">
            <summary>
            Gets a value indicating whether to search for latest changes within the same major version when supplied.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.PackageSearchOptions.NoLogging">
            <summary>
            If false print out messages to logger, if true don't print anything.
            TODO This is temporary. Better solution would be improve CLI logging and let ConsoleLogger implement 2 interfaces:
            ILogger and IConsoleLogger, ILogger will be muted until the operation started. In meanwhile IConsoleLogger records all
            logging messages in a buffer, then prints them out once operation starts. This way in the interactive mode we don't 
            print random messages from the ILogger since we do show a console UX. 
            In addition, we should always store all logging in some %Temp% folder for users to send us to diagnose problems and/or
            refactor ILogger to support verbosity parameters like in .NET logging.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.PackageSearchOptions.OnlyDefaultSources">
            <summary>
            When true only default public NuGet package sources are going to be used for selected operation
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.ISocketService">
            <summary>
            Manages Socket and TCP related functionality.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ISocketService.GetNextAvailablePort(System.UInt16,System.UInt16,System.Collections.Generic.ISet{System.UInt16})">
             <summary>
             Returns next available port within specified range. Upper and lower bounds are optional.
             If there is no lower bound tris to create a random port. If there is a lower bound starts
             with that and tries to increment until gets free port or reaches upper bound (if it is provided).
            
             If unable to get the free port return null.
             </summary>
             <param name="rangeStart"></param>
             <param name="rangeEnd"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ISocketService.GetRandomPort(System.UInt16,System.UInt16,System.Collections.Generic.ISet{System.UInt16})">
            <summary>
            Returns random available port within specified range. Upper and lower bounds are optional.
            If there is no lower bound tris to create a random port. If there is a lower bound starts 
            with that and tries to increment until gets free port or reaches upper bound (if it is provided).
            
            If unable to get the free port return null.
            </summary>
            <param name="rangeStart"></param>
            <param name="rangeEnd"></param>
            <param name="forbiddenPorts"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.SocketService">
            <summary>
            Manages Socket and TCP related functionality.
            </summary>
        </member>
        <member name="F:Microsoft.UpgradeAssistant.Services.SocketService.UnsafePorts">
            <summary>
            Unsafe ports as defined by chrome (http://superuser.com/questions/188058/which-ports-are-considered-unsafe-on-chrome)
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.SocketService.GetNextAvailablePort(System.UInt16,System.UInt16,System.Collections.Generic.ISet{System.UInt16})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.SocketService.GetRandomPort(System.UInt16,System.UInt16,System.Collections.Generic.ISet{System.UInt16})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.SocketService.GetNextAvailablePort(System.Net.Sockets.AddressFamily)">
            <summary>
            Get an available dynamic port for the addressFamily.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.IProcessRunnerService">
            <summary>
            Service that helps running external processes.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProcessRunnerService.RunAsync(Microsoft.UpgradeAssistant.Services.ProcessInfo,System.Threading.CancellationToken)">
            <summary>
            Runs a specified process with command line arguments.
            </summary>
            <param name="processInfo"></param>
            <param name="cancellationToken"></param>
            <returns>
             <see langword="true"/> if the process exited with exit code 0; <see langword="false"/>, otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.ProcessInfo">
            <summary>
             Specifies a set of values that are used when you start a process.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.ProcessInfo.Command">
            <summary>
             Gets or sets the application or document to start.
            </summary>
            <value>
             The name of the application to start, or the name of a document of a file type
             that is associated with an application and that has a default open action available
             to it. The default is an empty string ("").
            </value>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.ProcessInfo.Arguments">
            <summary>
             Gets or sets the set of command-line arguments to use when starting the application.
            </summary>
            <value>
             A single string containing the arguments to pass to the target application specified
             in the System.Diagnostics.ProcessStartInfo.FileName property. The default is an empty string ("").
            </value>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.ProcessInfo.WorkingDirectory">
            <summary>
             When the <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute"/> property is <see langword="false"/>,
             gets or sets the working directory for the process to be started. When
             <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute"/> is <see langword="true"/>,
             gets or sets the directory that contains the process to be started.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.ProcessInfo.EnvironmentVariables">
            <summary>
             Gets search paths for files, directories for temporary files, application-specific options,
             and other similar information.
            </summary>
            <value>
             A string dictionary that provides environment variables that apply to this process and child processes.
            </value>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.ProcessInfo.OutputData">
            <summary>
             Gets the content of the <c>stdout</c> once the process exited.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.ProcessInfo.ErrorData">
            <summary>
             Gets the content of the <c>stderr</c> once the process exited.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.ProcessInfo.PrintOutputToLog">
            <summary>
            When true prints process output to the output log.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.ProcessInfo.PrintErrorToLog">
            <summary>
            When true prints process errors to the output log.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.ProcessRunnerService">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.IOperationProgressService">
            <summary>
            A host specific service allowing to report progress for each <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/> when an operation runs.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IOperationProgressService.StartNodeAsync(Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <summary>
            Called when operation start node transformation.
            </summary>
            <param name="node"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IOperationProgressService.CompleteNodeAsync(Microsoft.UpgradeAssistant.SliceNode,Microsoft.UpgradeAssistant.Operations.SliceNodeState,System.Collections.Generic.IEnumerable{Microsoft.UpgradeAssistant.Operations.OperationMessage},System.Threading.CancellationToken)">
            <summary>
            Called when node was transformed.
            </summary>
            <param name="node"></param>
            <param name="resultState"></param>
            <param name="messages"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.NullOperationProgressService">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.NullOperationProgressService.StartNodeAsync(Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.NullOperationProgressService.CompleteNodeAsync(Microsoft.UpgradeAssistant.SliceNode,Microsoft.UpgradeAssistant.Operations.SliceNodeState,System.Collections.Generic.IEnumerable{Microsoft.UpgradeAssistant.Operations.OperationMessage},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.AssemblyHelper">
            <summary>
            Contains assembly helper API.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.DependenciesChangeSet.AnyChanges">
            <summary>
             Gets whether any of <see cref="P:Microsoft.UpgradeAssistant.Services.DependenciesChangeSet.Assemblies"/>, <see cref="P:Microsoft.UpgradeAssistant.Services.DependenciesChangeSet.Packages"/>, <see cref="P:Microsoft.UpgradeAssistant.Services.DependenciesChangeSet.Projects"/> or <see cref="P:Microsoft.UpgradeAssistant.Services.DependenciesChangeSet.Frameworks"/>
             collections contain changes.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.DependenciesSet">
            <summary>
            Set of project dependencies.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.Dependency">
            <summary>
            A model representing a dependency in a project.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.Dependency.Name">
            <summary>
            Dependency name.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.Dependency.Kind">
            <summary>
            Kind of the dependency.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.Dependency.Path">
            <summary>
            Physical path to the file on disk.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.Dependency.Definitions">
            <summary>
            Paths where a dependency was defined for the project. It is null for transitive dependencies.
            In most cases, it will be a single path, but in some cases, it can be multiple paths when the same dependency is defined in multiple targets.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.Dependency.IsTransitive">
            <summary>
            Returns true if dependency is not directly specified in teh project, but 
            coming from some other dependency (project or package).
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.DependencyChangesCollection`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
             Initializes a new instance of the <see cref="T:Microsoft.UpgradeAssistant.Services.DependencyChangesCollection`1"/> class with the specified parameters.
            </summary>
            <param name="comparer">
             The comparer to use when comparing items of <typeparamref name="T"/>. 
             If <see langword="null"/>, <see cref="T:Microsoft.UpgradeAssistant.Services.DependencyNameEqualityComparer"/> instance is used.
            </param>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.DependencyChangesCollection`1.Additions">
            <summary>
             Gets the collection of the recorded "additions".
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.DependencyChangesCollection`1.Removals">
            <summary>
             Gets the collection of the recorded "removals".
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.DependencyChangesCollection`1.AnyChanges">
            <summary>
             Indicates whether there are any items in either <see cref="P:Microsoft.UpgradeAssistant.Services.DependencyChangesCollection`1.Additions"/>
             or <see cref="P:Microsoft.UpgradeAssistant.Services.DependencyChangesCollection`1.Removals"/> collections.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.DependencyChangesCollection`1.Add(`0)">
            <summary>
             Records the specified item in <see cref="P:Microsoft.UpgradeAssistant.Services.DependencyChangesCollection`1.Additions"/>.
            </summary>
            <param name="item">The item to record as "added".</param>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.DependencyChangesCollection`1.Remove(`0)">
            <summary>
             Records the specified item in <see cref="P:Microsoft.UpgradeAssistant.Services.DependencyChangesCollection`1.Removals"/>.
            </summary>
            <param name="item">The item to record as "removed".</param>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.DependencyDefinition">
            <summary>
            A model representing a dependency definition in one of the msbuild files.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.DependencyDefinition.#ctor(System.String,System.String)">
            <summary>
            A model representing a dependency definition in one of the msbuild files.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.DependencyDefinition.Path">
            <summary>
            Physical path to the file on disk.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.DependencyDefinition.OriginalName">
            <summary>
            The initial name of the package we are replacing.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.FrameworkReference">
            <summary>
            A model representing a FrameworkReference element in the <see cref="T:Microsoft.UpgradeAssistant.Services.IProject"/>.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.IDependenciesGroup`1">
            <summary>
            Set of project dependencies.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.IDependenciesSet">
            <summary>
            Set of project dependencies.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.Package">
            <summary>
            A model representing a NuGet package in the <see cref="T:Microsoft.UpgradeAssistant.Services.IProject"/>.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.Package.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{Microsoft.UpgradeAssistant.Services.DependencyDefinition},System.Boolean)">
            <summary>
             Initializes a new instance of the <see cref="T:Microsoft.UpgradeAssistant.Services.Package"/> class with the specified parameters.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.Package.Version">
            <summary>
             Gets the version of the package (defined by <c>Version</c> metadata).
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.Package.IsGlobal">
            <summary>
            If true, it is specified with GlobalPackageReference in Directory.Packages.props file.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.Package.IsImplicit">
            <summary>
            Returns true when package is coming from some SDK.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.Package.NormalizeVersion(System.String)">
            <summary>
            Version could be defined with conditions: [1.0.0], (1.0.0) and [1.0.0, 2.0.0]. We take lower bound always at this moment.
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.ProjectReference">
            <summary>
            A model representing a project reference in the <see cref="T:Microsoft.UpgradeAssistant.Services.IProject"/>.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.Reference">
            <summary>
            A model representing an assembly reference in the <see cref="T:Microsoft.UpgradeAssistant.Services.IProject"/>.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.DefaultDiagnosticDataMiner">
            <summary>
            CS1069: The type name 'XXX' could not be found in the namespace 'YYY',
            CS0246: The type or namespace 'XXX' could not be found?
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.DiagnosticDataMinerAttribute">
            <summary>
            Attribute that is applicable for implementations of <see cref="T:Microsoft.UpgradeAssistant.Services.IDiagnosticDataMiner"/> and
            specifies when the miner should be applied.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.DiagnosticDataMinerAttribute.Code">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.IDiagnosticDataMinerMetadata.Code">
            <summary>
            Diagnostic code that this miner can process.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.DiagnosticMessage">
            <summary>
            A model for project build/restore message.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.DiagnosticsParser">
            <summary>
            Searches diagnostics in the text and returns a snapshot.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.DiagnosticsSnapshot">
            <summary>
            A model for project msbuild imports.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.Import">
            <summary>
            A model for project msbuild imports.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.Import.#ctor(System.String,System.Boolean)">
            <summary>
            A model for project msbuild imports.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.IProject">
            <summary>
            A wrapper over <see cref="T:Microsoft.UpgradeAssistant.Services.IProjectService"/> that represents a project and provides common
            properties/actions for project manipulation.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.IProject.Id">
            <summary>
            Unique project ID (GUID).
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.IProject.Name">
            <summary>
            Project name.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.IProject.Path">
            <summary>
            Project file full path.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.IProject.IsSdk">
            <summary>
            Returns true if project is SDK-style project.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.IProject.Namespace">
            <summary>
            Default namespace.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.IProject.Capabilities">
            <summary>
            Set of project capability strings
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.IProject.Solution">
            <summary>
            Access to the solution object.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.IProject.Dependencies">
            <summary>
            Set of project dependencies.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.IProject.Imports">
            <summary>
            List of imports in the project file.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.IProject.NumberOfCodeFiles">
            <summary>
            Number of code files in the project.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProject.AddItemAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Threading.CancellationToken)">
            <summary>
            Add an msbuild item to a project.
            </summary>
            <param name="itemType"></param>
            <param name="include"></param>
            <param name="attributes"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProject.HasItemAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Add an msbuild item to a project.
            </summary>
            <param name="itemType"></param>
            <param name="include"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProject.HasItemsInFolderAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns true if specified folder contains any project items.
            </summary>
            <param name="projectPath"></param>
            <param name="relativeProjectFolderPath"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProject.GetItemsAsync(System.Threading.CancellationToken)">
            <summary>
            Returns a collection of project items for current project.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProject.GetPropertyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns project property value
            </summary>
            <param name="key"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProject.SetPropertyAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets project property. Property here is msbuild property in the project file.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProject.SetPropertiesAsync(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Threading.CancellationToken)">
            <summary>
            Sets project properties.
            </summary>
            <param name="properties"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProject.RemovePropertyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes project property. Property here is msbuild property in the project file.
            </summary>
            <param name="key"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProject.RemovePropertiesAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Removes project properties. Properties here are msbuild properties in the project file.
            </summary>
            <param name="keys"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProject.HasProjectTypeGuidAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Checks if project has a specified project type GUID.
            </summary>
            <param name="projectType"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.IProjectService">
            <summary>
            A host specific service needs to be implemented and provided by a host.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProjectService.ApplyDependenciesChangesAsync(Microsoft.UpgradeAssistant.Operations.OperationContext,Microsoft.UpgradeAssistant.Services.IProject,Microsoft.UpgradeAssistant.Services.DependenciesChangeSet,System.Threading.CancellationToken)">
            <summary>
            Applies changes to the project dependencies based on given changeset.
            </summary>
            <param name="context"></param>
            <param name="project"></param>
            <param name="changes"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProjectService.AddPackageAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Adds a NuGet package to teh project. If it already exists with version less than is specified it skips.
            </summary>
            <param name="projectPath"></param>
            <param name="name"></param>
            <param name="version"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProjectService.RemovePackageAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Uninstalls NuGet package with given name from the project.
            </summary>
            <param name="projectPath"></param>
            <param name="name"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProjectService.GetReferenceTargetFrameworksAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns target frameworks of a specified reference (project path or assembly path)
            </summary>
            <param name="referencePath"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProjectService.AddItemAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Threading.CancellationToken)">
            <summary>
            Add an msbuild item to a project.
            </summary>
            <param name="projectPath"></param>
            <param name="itemType"></param>
            <param name="include"></param>
            <param name="attributes"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProjectService.HasItemAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Add an msbuild item to a project.
            </summary>
            <param name="projectPath"></param>
            <param name="itemType"></param>
            <param name="include"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProjectService.HasItemsInFolderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns true if specified folder contains any project items.
            </summary>
            <param name="projectPath"></param>
            <param name="relativeProjectFolderPath"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProjectService.GetItemsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns a collection of project items for current project.
            </summary>
            <param name="projectPath"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProjectService.GetDependenciesAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns a set of project dependencies.
            </summary>
            <param name="rootPath"></param>
            <param name="projectPath"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProjectService.CreateProjectAsync(Microsoft.UpgradeAssistant.Operations.OperationContext,Microsoft.UpgradeAssistant.Services.ISolution,System.String,System.String,Microsoft.UpgradeAssistant.Templates.IProjectTemplate,System.Threading.CancellationToken)">
            <summary>
            Creates a new project from given template ID.
            </summary>
            <param name="context"></param>
            <param name="solution"></param>
            <param name="parentFolder"></param>
            <param name="projectName"></param>
            <param name="template"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProjectService.GetProjectByPathAsync(Microsoft.UpgradeAssistant.Services.ISolution,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds project by path in the solution. If not found returns null.
            </summary>
            <param name="solution"></param>
            <param name="projectPath"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProjectService.GetProjectByIdAsync(Microsoft.UpgradeAssistant.Services.ISolution,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds project by Guid ID in the solution. If not found returns null.
            </summary>
            <param name="solution"></param>
            <param name="projectId"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProjectService.GetPropertyAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns project property value
            </summary>
            <param name="projectPath"></param>
            <param name="key"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProjectService.SetPropertyAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets project property. Property here is msbuild property in the project file.
            </summary>
            <param name="projectPath"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProjectService.SetPropertiesAsync(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Threading.CancellationToken)">
            <summary>
            Sets project properties.
            </summary>
            <param name="projectPath"></param>
            <param name="properties"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProjectService.RemovePropertyAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Removes project property. Property here is msbuild property in the project file.
            </summary>
            <param name="projectPath"></param>
            <param name="key"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProjectService.RemovePropertiesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Removes project properties. Properties here are msbuild properties in the project file.
            </summary>
            <param name="projectPath"></param>
            <param name="keys"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProjectService.HasProjectTypeGuidAsync(Microsoft.UpgradeAssistant.Services.ISolution,System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Checks if project has a specified project type GUID.
            </summary>
            <param name="solution"></param>
            <param name="projectPath"></param>
            <param name="projectType"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProjectService.BuildProjectAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Builds specified project and returns diagnostics (errors/warnings) after the build. 
            If waitForCompletion was false, then empty diagnostics snapshot is returned.
            </summary>
            <param name="projectPath"></param>
            <param name="waitForCompletion"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProjectService.RestoreProjectAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Restores specified project and returns diagnostics (errors/warnings) after the restore. 
            If waitForCompletion was false, then empty diagnostics snapshot is returned.
            
            Note: build would trigger restore if needed
            </summary>
            <param name="projectPath"></param>
            <param name="waitForCompletion"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProjectService.BuildSolutionAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Builds specified solution and returns diagnostics (errors/warnings) after the build. 
            If waitForCompletion was false, then empty diagnostics snapshot is returned.
            
            Note: in Visual Studio builds currently open solution and that is why solutionFilePath can be null.
            Note: build would trigger restore if needed
            </summary>
            <param name="solutionFilePath"></param>
            <param name="waitForCompletion"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProjectService.RestoreSolutionAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Restores specified solution and returns diagnostics (errors/warnings) after the build. 
            If waitForCompletion was false, then empty diagnostics snapshot is returned.
            
            Note: in Visual Studio builds currently open solution and that is why solutionFilePath can be null.
            </summary>
            <param name="solutionFilePath"></param>
            <param name="waitForCompletion"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.IProjectService.GetNumberOfCodeLinesInProjectAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns number of code lines in the project.
            </summary>
            <param name="projectPath"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.Project">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.Project.Id">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.Project.Name">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.Project.Path">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.Project.IsSdk">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.Project.Namespace">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.Project.Capabilities">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.Project.Dependencies">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.Project.Imports">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.Project.Solution">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.Project.AddItemAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.Project.HasItemAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.Project.HasItemsInFolderAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.Project.GetItemsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.Project.GetPropertyAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.Project.SetPropertyAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.Project.SetPropertiesAsync(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.Project.RemovePropertyAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.Project.HasProjectTypeGuidAsync(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.ProjectBuildResult">
            <summary>
            A of a build or restore operation for project or solution.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ProjectBuildResult.#ctor(System.Boolean,Microsoft.UpgradeAssistant.Services.DiagnosticsSnapshot)">
            <summary>
            A of a build or restore operation for project or solution.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.ProjectItem">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.ProjectPropertyDefinition">
            <summary>
            A model representing a MSBuild property definition.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ProjectPropertyDefinition.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            A model representing a MSBuild property definition.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.ProjectPropertyDefinition.Path">
            <summary>
            Physical path to the file on disk where the property is defined.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.IRegistryService">
            <summary>
            Note: this service only works on windows. On mac it would always return null values.
            Check OS in code before calling its methods and plan different way to get data for OSX or Linux.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.DefaultMacSdkLocator.GetDotNetSdkPath">
            <summary>
            Returns path for the dotnet SDK root folder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.DefaultWindowsSdkLocator.GetDotNetSdkPath">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.Sdk.DotNetWorkloadExtensions.ParseWorkloads(System.String)">
            <summary>
            Parses output of "dotnet workload list" command and returns a list of installed workloads.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.Sdk.DotNetWorkloadExtensions.GetMissingWorkloads(System.Collections.Generic.IEnumerable{Microsoft.UpgradeAssistant.DotNetWorkload},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Checks installed workloads against required workloads and returns a list of missing workloads.
            </summary>
            <param name="installedWorkloads">Installed workloads.</param>
            <param name="requiredWorkloads">Required workloads.</param>
            <param name="precise">Exact workload check only. When set to FALSE superset workloads are allowed, e.g. "maui" for "maui-android"</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.Sdk.DotNetWorkloadExtensions.IsCompatibleWorkload(System.String,System.String,System.Boolean)">
            <summary>
            Returns true if installed workload is compatible with required workload, i.e. exact match
            or superset, e.g. if "maui" is installed, then "maui-android" is also installed.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ISdkLocator.GetDotNetSdkPath">
            <summary>
            Returns path for the dotnet SDK root folder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ISdkService.IsRuntimeInstalled(System.Version,System.Boolean,System.Boolean)">
            <summary>
            Returns true if specified .NET runtime is installed. 
            If exactMatch is false, checks only major version.
            In case of exactMatch=true checks major and minor.
            If backwardsCompat is true, checks if specified runtime is backwards compatible with installed runtime.
            will check if a major version equal to or higher is installed.
            exactMatch is prioritized over backwardsCompat.
            </summary>
            <param name="runtimeVersionToCheck"></param>
            <param name="exactMatch"></param>
            <param name="backwardsCompat"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ISdkService.GetDotNetSdkPath">
            <summary>
            Returns path for the dotnet SDK root folder or null if it does not exists.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ISdkService.GetInstalledWorkloadsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Runs "dotnet workload list" command and returns collection of installed workloads.
            </summary>
            <param name="workingDirectory">Working directory. Can be null.
            <para>
            "dotnet.exe workload list" result is affected by nuget.config in current or
            ancestor directory. If not provided, the dotnet.exe's directory should be used.
            </para>
            </param>
            <param name="cancellationToken">Cancellation token.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when dotnet.exe is not found.</exception>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.ServiceAttribute">
            <summary>
            Attribute that is applicable for implementations of <see cref="T:Microsoft.UpgradeAssistant.Services.IService"/>.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.ServiceAttribute.Type">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.IServiceMetadata.Type">
            <summary>
            Actual type of the service.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.ServiceCollection">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ServiceCollection.AddService``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ServiceCollection.AddService(System.Type,Microsoft.UpgradeAssistant.Services.IService)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ServiceCollection.GetService``1">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ServiceCollection.GetService(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.ISolution">
            <summary>
            Provides a minimal set of commonly used solution properties or actions. It does not have
            to be kept in memory and can be instantiated just before an operation context is created.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.ISolution.Name">
            <summary>
            Solution name.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.ISolution.FilePath">
            <summary>
            Solution file.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.ISolution.Directory">
            <summary>
            Solution folder.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.ISolution.SolutionFile">
            <summary>
            Provides access to the solution file.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ISolution.GetProjectAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns a project by its full path.
            </summary>
            <param name="projectFullPath"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ISolution.GetNumberOfProjectsAsync(System.Threading.CancellationToken)">
            <summary>
            Returns a number of projects in the solution.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ISolution.CreateProjectAsync(Microsoft.UpgradeAssistant.Operations.OperationContext,System.String,System.String,Microsoft.UpgradeAssistant.Templates.IProjectTemplate,System.Threading.CancellationToken)">
            <summary>
            Creates a new project with given name and returns new <see cref="T:Microsoft.UpgradeAssistant.Services.IProject"/> when succeeded.
            </summary>
            <param name="context"></param>
            <param name="parentFolder"></param>
            <param name="projectName"></param>
            <param name="template"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.Solution">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.Solution.Name">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.Solution.FilePath">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Services.Solution.Directory">
            <inheritdoc />
        </member>
        <member name="F:Microsoft.UpgradeAssistant.Services.Solution._solutionFile">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.Solution.GetProjectAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.Solution.CreateProjectAsync(Microsoft.UpgradeAssistant.Operations.OperationContext,System.String,System.String,Microsoft.UpgradeAssistant.Templates.IProjectTemplate,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.SolutionFile">
            <summary>
            Parses .sln file and gets projects metadata out of it.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.ITargetFrameworkService">
            <summary>
            A host specific service that parses target framework moniker into <see cref="T:Microsoft.UpgradeAssistant.TargetFrameworks.TargetFramework"/> object.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.TargetFrameworkServiceBase">
            <summary>
            A base class for <see cref="T:Microsoft.UpgradeAssistant.Services.ITargetFrameworkService"/> with common functionality.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.TargetFrameworkServiceBase.GetAdjustedTargetFrameworkAsync(Microsoft.UpgradeAssistant.TargetFrameworks.TargetFramework,System.String,Microsoft.UpgradeAssistant.Services.IProject,Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.ITelemetryService">
            <summary>
            Abstracts out telemetry events management and let's host to use its own telemetry infrastructure.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.TelemetryEvent.GetTelemetryStrings(Microsoft.UpgradeAssistant.Traits.ITraitsSet)">
             <summary>
             We are attempting to capture important traits and avoid logging too much data at the same time with each event.
             The length of telemetry event property string is limited to ~1000 characters. Thus:
             - we order traits first to make sure most important traits are recorded and put them in front
             - we exclude most VS design time traits since they are not too interesting for upgrade scenario
             - we put traits in separate strings with max length 1000 characters and telemetry event might have several
             traits properties with index (very unlikely): traits, traits1 etc. If indexing happens we would still be
             able to check them in Kusto by checking in all indexed properties.
            
             This is needed to avoid always adding known traits to predefined set, since we would never collect them until
             next tool is shipped and all users update to latest. However with new approach we would always getting them even
             without knowing trait names in advance.
             </summary>
             <param name="traits"></param>
             <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.ITemplateService">
            <summary>
            Provides access to project templates (see also <seealso cref="T:Microsoft.UpgradeAssistant.Templates.IProjectTemplate"/>).
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ITemplateService.GetTemplates(Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Threading.CancellationToken)">
            <summary>
            Gets all templates applicable to the specified traits set.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ITemplateService.GetTemplate(Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets template with specified ID applicable to the specified traits set.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.TemplateService">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.TemplateService.GetTemplate(Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.TemplateService.GetTemplates(Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.Testing.ITestService.IsReady">
            <summary>
            False if we can't find the test service APIs in VS.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Services.ITryConvertService">
            <summary>
            Abstracts out project conversion from classic to SDK style projects..
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Services.ITryConvertService.ConvertAsync(Microsoft.UpgradeAssistant.Operations.OperationContext,System.String,Microsoft.UpgradeAssistant.TargetFrameworks.TargetFramework,Microsoft.UpgradeAssistant.Services.ILogger,System.Threading.CancellationToken)">
            <summary>
            Converts specified project to SDK-style. Logger passed here will be used for any output during the conversion.
            Logger is needed since try-convert uses Console and does not have a way to pass parameters.
            </summary>
            <param name="context"></param>
            <param name="projectFilePath"></param>
            <param name="targetFramework"></param>
            <param name="logger"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.ProjectExtensions.GetUpgradeTargetFrameworksAsync(Microsoft.UpgradeAssistant.Services.IProject,Microsoft.UpgradeAssistant.Operations.OperationContext,System.Threading.CancellationToken)">
            <summary>
            Returns a list of target frameworks that current upgrade operation is having.
            </summary>
            <param name="project"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.ProjectExtensions.GetTargetFrameworksAsync(Microsoft.UpgradeAssistant.Services.IProject,System.Threading.CancellationToken)">
            <summary>
            Returns current project target frameworks.
            </summary>
            <param name="project"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.SdkService.IsRuntimeInstalled(System.Version,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.SdkService.GetDotNetSdkPath">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.SdkService.GetInstalledWorkloadsAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Slice">
            <summary>
             <para>
              Slice object not only contains final nodes, but also an intermediate data
              helping with continuation of nodes discovery. 
             </para>
             <para>
              For example, slices could be very deep and we might want to ask user if they want to continue or not go
              deeper and by how deep (in layer numbers) to go.
             </para>
             <para>
              When/if we need this instead of queueing SliceNode, we can queue [level, SliceNode],
              and add <see cref="T:Microsoft.UpgradeAssistant.SliceOptions"/> object to control the depth.
             </para>
            </summary>
            <remarks>
             <see cref="M:Microsoft.UpgradeAssistant.Slice.PopulateNode(Microsoft.UpgradeAssistant.SliceTree,System.Collections.Generic.IEnumerable{Microsoft.UpgradeAssistant.SliceNode})"/> is done synchronously, no need for synchronization at this moment.
            </remarks>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.SliceContext">
            <summary>
            Context for a <see cref="T:Microsoft.UpgradeAssistant.Slice"/> object. Context is the entry point for all services
            and helpful APIs that could be used during discovery and analysis.
            </summary>
        </member>
        <member name="F:Microsoft.UpgradeAssistant.SliceContext.TraitsTelemetryStrings">
            <summary>
             The key under which traits telemetry strings get stored in the properties store.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.SliceContext.#ctor(Microsoft.UpgradeAssistant.Services.IServiceCollection,Microsoft.UpgradeAssistant.Services.IProject,Microsoft.UpgradeAssistant.Traits.ITraitsSet)">
            <summary>
             Initializes a new instance of the <see cref="T:Microsoft.UpgradeAssistant.SliceContext"/> class with the specified parameters.
            </summary>
            <param name="services">All services available at global or project level scopes.</param>
            <param name="project">The source project.</param>
            <param name="traits">The set of traits associated with this context.</param>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.SliceContext.Traits">
            <summary>
            Gets the set of traits associated with this context. It contains a superset of project capabilities,
            project language, output type, target framework etc.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.SliceCrawler">
            <summary>
            Helper class that applies BFS traversal to discover all slice nodes.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.SliceCrawler.ConnectLeaveAsync(Microsoft.UpgradeAssistant.Slice,Microsoft.UpgradeAssistant.SliceTree,System.Threading.CancellationToken)">
            <summary>
            For all leaf nodes we check <see cref="T:Microsoft.UpgradeAssistant.SliceOptions"/> to see if there are any additional kinds of discoveries to be done.
            </summary>
            <param name="slice"></param>
            <param name="currentTree"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.SliceNode">
            <summary>
            Main entity that all the logic is based on. It represents an abstract project component,
            which can be anything and as granular as it needs. For example, type, view, package project etc.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.SliceNode.Name">
            <summary>
            Name of the node, does not have to be unique. Uniqueness is combined across Name, Kind and Path.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.SliceNode.Kind">
            <summary>
            Node kind that suggests the way this node could be treated in different scenarios (analysis, discovery and transformation).
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.SliceNode.Path">
            <summary>
            Path to the node's file if it is available and applicable.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.SliceNode.Flags">
            <summary>
            Set of flags associated with this particular node object.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.SliceNode.DisplayName">
            <summary>
            Display name to describe the node in UX.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.SliceNode.Tag">
            <summary>
            Allows to attach any piece of data to the node.
            </summary>
        </member>
        <member name="F:Microsoft.UpgradeAssistant.SliceNodeFlags.Required">
            <summary>
             The node is required and can't unchecked in the analysis view for a upgrade operation.
            </summary>
            <remarks>This flag only affects the UI.</remarks>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.SliceNodeEqualityComparer">
            <summary>
            Can compare to instances of <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/>.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.SliceNodeKindParser.IsMatching(System.String,System.String)">
             <summary>
             Matches node kind expression specified on contracts' attributes with given node kind to see
             if a contract can operate on this node kind.
             
                 "type.controller" - exactly equals to type.controller
                 "type" - exactly equals to type
                 "type.*" - to any type based nodes
                 "*" - any node kind
                 empty or not specified - ignored
            
             There should be no spaces and only special symbol is a '.' separator, everything else is treated as a kind part's value.
             Note: expression can contain multiple nodeKinds separated by ';'.
             </summary>
             <param name="nodeKind"></param>
             <param name="expression"></param>
             <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.SliceOptions">
            <summary>
            Allow to alter <see cref="T:Microsoft.UpgradeAssistant.Slice"/> discovery or other operations and could be tied to UI
            and generated dynamically or potentially via extensibility if user wants to change something
            in our logic.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.SliceOptions.LeafExclusions">
            <summary>
            Discovery does not go down the node kinds specified in this set.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.SliceOptions.GetLeafConnections(System.String)">
            <summary>
            Returns additional <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/> kinds to scan when there no more children found for a node during crawling.
            This helps to attach Assemblies and NuGet packages for example to the leaf type nodes instead of every type node,
            which would end up in much bigger slice.
            </summary>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.SliceTree">
            <summary>
            A tree node that wraps <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/> and allows to create a tree structure,
            while <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/> is carrying only data.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.SliceTree.Node">
            <summary>
            Data associated with this tree node. Notice that we reuse <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/>
            instances instead of creating new objects for every tree node to avoid GC.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.SliceTree.ReferenceCount">
            <summary>
            Keeps number of references to the <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/>.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.SliceTree.IsChecked">
            <summary>
             Gets or sets whether the node is selected in the analysis view for a upgrade operation.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.SliceTree.IsReadOnly">
            <summary>
             Gets or sets whether the node can respond to user interaction in the analysis view for a upgrade operation.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.SliceTree.Children">
            <summary>
            Collection of direct children tree nodes.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.TargetFrameworks.ITargetFrameworkAdjuster">
            <summary>
            Can adjust target framework (or a list of new target frameworks) given selected upgrade TFM and
            project's current TFM.
            
            For example, upgrade TFM is generic "net8.0", but WinForms projects would need to 
            have "net8.0-windows".
            
            Implementations should be decorated with an attribute which specify order in which 
            adjusters should be called and traits to specify in what context an adjuster is applicable.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.TargetFrameworks.ITargetFrameworkAdjuster.GetAdjustedTargetFrameworkAsync(Microsoft.UpgradeAssistant.TargetFrameworks.TargetFramework,System.String,Microsoft.UpgradeAssistant.Services.IProject,Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Threading.CancellationToken)">
            <summary>
            Returns adjusted target framework (or a list of new target frameworks) given selected upgrade TFM and project's
            current TFM.
            
            For example, upgrade TFM is generic "net8.0", but WinForms projects would need to have "net8.0-windows".
            </summary>
            <param name="targetFramework"></param>
            <param name="projectFramework"></param>
            <param name="project"></param>
            <param name="traits"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.TargetFrameworks.ITargetFrameworkProvider">
            <summary>
            Contract that can determine compatible target frameworks for given project traits.
            Implementations will be called in the order of precedence and first one that returns
            non-empty list of frameworks will be used.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.TargetFrameworks.ITargetFrameworkProvider.GetTargetFrameworksAsync(Microsoft.UpgradeAssistant.Services.IProject,Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Threading.CancellationToken)">
            <summary>
            Returns compatible target frameworks for given project traits.
            </summary>
            <param name="project"></param>
            <param name="traits"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.TargetFrameworks.TargetFramework">
            <summary>
            Target Framework Moniker (TFM).
            See https://learn.microsoft.com/en-us/dotnet/standard/frameworks
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.TargetFrameworks.TargetFrameworkAdjusterAttribute">
            <summary>
            Attribute that is applicable for implementations of <see cref="T:Microsoft.UpgradeAssistant.TargetFrameworks.ITargetFrameworkAdjuster"/> and
            specifies when and how the adjuster should be applied.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.TargetFrameworks.TargetFrameworkAdjusterAttribute.Traits">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.TargetFrameworks.TargetFrameworkAdjusterAttribute.Order">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.TargetFrameworks.ITargetFrameworkAdjusterMetadata.Traits">
            <summary>
            A traits expression to use when decision is made to use the adjuster or not for
            current project context. When null, applied for all projects.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.TargetFrameworks.TargetFrameworkProvider">
            <summary>
            Default target framework provider which will be called last if there are
            no more specific providers for given project's traits.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.TargetFrameworks.TargetFrameworkProvider.GetTargetFrameworksAsync(Microsoft.UpgradeAssistant.Services.IProject,Microsoft.UpgradeAssistant.Traits.ITraitsSet,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.TargetFrameworks.TargetFrameworkProviderAttribute">
            <summary>
            Attribute that is applicable for implementations of <see cref="T:Microsoft.UpgradeAssistant.TargetFrameworks.ITargetFrameworkProvider"/> and
            specifies when and how the framework provider should be applied.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.TargetFrameworks.TargetFrameworkProviderAttribute.Traits">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.TargetFrameworks.TargetFrameworkProviderAttribute.Order">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.TargetFrameworks.ITargetFrameworkProviderMetadata.Traits">
            <summary>
            A capabilities expression to use when decision is made to use the provider or not for
            current project context. When null, applied for all projects.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.TargetFrameworks.ITargetFrameworkProviderMetadata.Order">
            <summary>
            Target framework matchers will be called in the order of precedence and first one
            that returns non-empty list of frameworks will be used.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Templates.CSharp.ClassLibrary.GenericClassLibraryProjectTemplate.ProjectFileExtension">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Templates.CSharp.ClassLibrary.GenericConsoleAppProjectTemplate.ProjectFileExtension">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Templates.PortTemplateDecorator.Decorate(System.Text.StringBuilder,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Templates.ProjectTemplate.TemplateId">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Templates.ProjectTemplate.Name">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Templates.ProjectTemplate.Description">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Templates.ProjectTemplate.ProjectFileExtension">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Templates.ProjectTemplate.CreateProject(Microsoft.UpgradeAssistant.Operations.OperationContext,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Templates.TemplateAttribute.Traits">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Templates.VisualBasic.ClassLibrary.GenericClassLibraryProjectTemplate.ProjectFileExtension">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Templates.VisualBasic.Console.GenericConsoleProjectTemplate.ProjectFileExtension">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Traits.ITraitProvider">
            <summary>
            Discovers project traits.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Traits.ITraitsSet">
             <summary>
             Set of unique traits describing a project and used in contract matching process
             which executes contract traits expressions.
            
             Expression syntax is similar to Project Capabilities syntax in VS extensibility.
            
             Use case scenario is to pick applicable contracts to use in a slice or operation. When a slice
             or operation are initialized the would receive <see cref="T:Microsoft.UpgradeAssistant.Traits.TraitsSet"/> filled with current
             project's capabilities specified in project and its SDK. In addition, we add to this set of traits
             some well known project properties like OutputType, TargetFramework and TargetFrameworks.
            
             This way we always have a set of everything we know and have consistent single filtering logic.
             </summary>    
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Traits.DefaultTraitProvider">
            <summary>
            Discovers default project traits that can be used for any project flavor or that we
            know already are certainly going to be used by some existing logic.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Traits.ProjectFlavorProvider">
            <summary>
            Discovers if solution needs to be reloaded if project flavor GUID needs to be changed in .sln file.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Traits.TargetFrameworkTraitProvider">
            <summary>
            Parses target frameworks associated with the project and returns <see cref="T:Microsoft.UpgradeAssistant.Traits.TargetFrameworkTrait"/> objects.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Traits.Providers.TestProjectTraitProvider">
            <summary>
            Traits provider which marks the project as TestProject based on the DefaultTestContainer
            https://dev.azure.com/devdiv/DevDiv/_git/VSUnitTesting?path=/src/TestWindow/Core/TestContainer/DefaultTestContainer.cs
            and UWPTestContainer
            https://dev.azure.com/devdiv/DevDiv/_git/VSUnitTesting?path=/src/TestWindow/Core/TestContainer/UWPTestContainer.cs
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Traits.UpgradeAssistantTraitProvider">
            <summary>
            Returns <see cref="T:Microsoft.UpgradeAssistant.Traits.UpgradeAssistantTrait"/> objects that contain information about this instance of the Upgrade Assistant.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Traits.TraitProviderAttribute">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Traits.TraitsExpressionParser">
            <summary>
            A project and service trait expression parser and evaluator.
            Note: it is taken from Managed Project System (src\Microsoft.VisualStudio.ProjectSystem\Core\Capabilities\CapabilityExpressionParser.cs)
            and simplified to our scenario. We would have already a HashSet of traits in current context and don't need callbacks.
            </summary>
            <devremarks>
            This is a struct rather than a class to avoid allocating memory unnecessarily.
            </devremarks>
        </member>
        <member name="F:Microsoft.UpgradeAssistant.Traits.TraitsExpressionParser._tokenizer">
            <summary>
            The tokenizer that reads the trait expression.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Traits.TraitsExpressionParser.#ctor(System.String,Microsoft.UpgradeAssistant.Traits.ITraitsSet)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.UpgradeAssistant.Traits.TraitsExpressionParser"/> struct.
            </summary>
            <param name="expression">The trait expression.</param>
            <param name="traits">Set of existing traits.</param>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Traits.TraitsExpressionParser.Evaluate(System.String,Microsoft.UpgradeAssistant.Traits.ITraitsSet)">
            <summary>
            Checks whether a given trait expression matches against a given set of project or service traits.
            </summary>
            <param name="expression">
            The trait expression, such as "(VisualC | CSharp) + (MSTest | NUnit)".
            The '|' is the OR operator.
            The '&amp;' and '+' characters are both AND operators.
            The '!' character is the NOT operator.
            Parentheses force evaluation precedence order.
            A null or empty expression is evaluated as a match.
            </param>
            <param name="traits">Set of traits to use to evaluate provided expression.</param>
            <returns>The result of the expression match test.</returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Traits.TraitsExpressionParser.IsSymbolCharacter(System.Char)">
            <summary>
            Checks whether a given character is an allowed member of a trait term.
            </summary>
            <param name="ch">The character to test.</param>
            <returns><see langword="true" /> if the character would be an allowed member of a trait term; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Traits.TraitsExpressionParser.OrTerm">
            <summary>
            Processes | operators.
            </summary>
            <returns>The result of evaluating the current sub-expression.</returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Traits.TraitsExpressionParser.AndTerm">
            <summary>
            Processes &amp; operators.
            </summary>
            <returns>The result of evaluating the current sub-expression.</returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Traits.TraitsExpressionParser.Term">
            <summary>
            Processes trait terms.
            </summary>
            <returns>The result of evaluating the current sub-expression.</returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Traits.TraitsExpressionParser.TryProcessToken(System.String,System.Boolean@)">
            <summary>
             Process special tokens like {key:value} where ':' should be <c>=</c>, <c>&lt;</c>, <c>&gt;</c>, <c>&lt;=</c>, <c>&gt;=</c>, <c>!=</c>.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Traits.TraitsExpressionParser.Top">
            <summary>
            Processes the entire expression.
            </summary>
            <returns>The result of evaluating the expression.</returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Traits.TraitsExpressionParser.Tokenizer">
            <summary>
            The expression tokenizer.
            </summary>
            <devremarks>
            This is a struct rather than a class to avoid allocating memory unnecessarily.
            </devremarks>
        </member>
        <member name="F:Microsoft.UpgradeAssistant.Traits.TraitsExpressionParser.Tokenizer._peeked">
            <summary>
            The most recently previewed token.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Traits.TraitsExpressionParser.Tokenizer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.UpgradeAssistant.Traits.TraitsExpressionParser.Tokenizer"/> struct.
            </summary>
            <param name="input">The expression to parse.</param>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Traits.TraitsExpressionParser.Tokenizer.Input">
            <summary>
            Gets the entire expression being tokenized.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Traits.TraitsExpressionParser.Tokenizer.Position">
            <summary>
            Gets the position of the next token.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Traits.TraitsExpressionParser.Tokenizer.Next">
            <summary>
            Gets the next token in the expression.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Traits.TraitsExpressionParser.Tokenizer.Peek">
            <summary>
            Peeks at the next token in the stream without skipping it on
            the next invocation of <see cref="M:Microsoft.UpgradeAssistant.Traits.TraitsExpressionParser.Tokenizer.Next"/>.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Traits.TraitsSet">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Traits.TraitsSet.Count">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Traits.TraitsSet.GetTrait(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Traits.TraitsSet.GetAll">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Traits.TraitsSet.IsPresent(System.Object)">
            <summary>
            Returns true if trait is present in current set.
            </summary>
            <param name="trait"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Traits.TraitsSet.With(System.Object[])">
            <summary>
            Returns a clone of this traits set merged with given set of traits.
            </summary>
            <param name="traits"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Traits.TraitsSet.Without(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Traits.TraitsSet.Add(System.Object[])">
            <summary>
            Adds a trait(s) to the set.
            </summary>
            <param name="traits"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Traits.TraitsSet.AddRange(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Adds a range of traits to the set.
            </summary>
            <param name="traits"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.AssemblyMapTransformerBase">
             <summary>
             If <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/> is an assembly reference node, tries to find corresponding package
             replacement for new project's target framework. If replacement(s) found, adds it if the project
             does not yet have a package(s) with that name.
            
             If replacement is not found skips.
            
             If assembly/package map contains empty replacement list, removes assembly from the project.
             </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.AssemblyReferenceInplaceTransformer">
            <summary>
            If <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/> is an assembly node, this transformer tries to check if project's new target frameworks
            are compatible for the assembly reference and a new core project. If they are, it skips and don't do anything.
            If assembly reference is not supported it is removed.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.AssemblyReferenceSideBySideTransformer">
            <summary>
            If <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/> is an assembly node, this transformer tries to check if target frameworks
            are compatible for the assembly reference and a new core project. If they are, it adds an assembly
            reference to the new core project (if it does not exist). If target frameworks are incompatible, then it skips.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.FrameworkReferenceSideBySideTransformer">
            <summary>
             If <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/> is an assembly node, and it is a web related assembly like (System.Web or System.Web.Mvc)
             it tries to add the following to the project and waits for restore to complete:
             
             <code>
               &lt;ItemGroup>
                 &lt;FrameworkReference Include="Microsoft.AspNetCore.App" />
               &lt;/ItemGroup>
             </code>
            </summary>
            <remarks>
             If there are more examples like this, add a map based logic similar to packages where assemblies would be mapped to some framework.
            </remarks>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.AdaptiveIdentifierTransformerBase">
            <summary>
            This base class works very similar to <see cref="T:Microsoft.UpgradeAssistant.Transformers.TypeMapTransformerBase"/> however allows replacement of old
            type with either new type or an interface if it exists. Examples are HtmlHelper and UrlHelper, see their
            corresponding subclasses of this base.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.Code.AssemblyAttributeTransformerBase">
            <summary>
            Moves certain assembly level attributes of .NET Framework projects to*.*proj file properties of .NET Core projects.
            </summary>
            <remarks>
            https://learn.microsoft.com/en-us/dotnet/core/project-sdk/msbuild-props#assembly-attribute-properties
            </remarks>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.Code.CSharp.AssemblyAttributeTransformer">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Transformers.Code.CSharp.CSharpSyntaxNodeActions.GetCommentOwnerSyntax(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Returns node which should own the comment.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.Code.CSharp.DefaultMemberMapTransformer">
            <summary>
            Replaces common .NET Framework methods and properties calls to new .NET or adds TODO comments when
            no transformation is possible.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.Code.CSharp.DefaultNamespaceMapTransformer">
            <summary>
            Replaces common .NET Framework methods and properties calls to new .NET or adds TODO comments when
            no transformation is possible.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.Code.VisualBasic.AssemblyAttributeTransformer">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.Code.VisualBasic.DefaultMemberMapTransformer">
            <summary>
            Replaces common .NET Framework methods and properties calls to new .NET or adds TODO comments when
            no transformation is possible.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.Code.VisualBasic.DefaultNamespaceMapTransformer">
            <summary>
            Replaces common .NET Framework methods and properties calls to new .NET or adds TODO comments when
            no transformation is possible.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Transformers.Code.VisualBasic.VisualBasicSyntaxNodeActions.GetCommentOwnerSyntax(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Returns node which should own the comment.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.AttributeTypeMapTransformerBase">
            <summary>
            Language agnostic base class for transformers that can update types in a batch based
            on a typemap files (from embedded resources or user provided files).
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.CodeTransformerBase">
            <summary>
            Base class for code transformers handling some common actions that each code transformer would have to do.
            It is agnostic to any specifics about the change a subclass would apply.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.ICodeFixTransformer">
            <summary>
            Implemented by slice node transformers that can change a document as part of a code fix.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Transformers.ICodeFixTransformer.ChangeDocumentAsync(Microsoft.UpgradeAssistant.Operations.OperationContext,Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken)">
            <summary>
            Changes the document as part of a code fix.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.IdentifierTransformerBase">
             <summary>
             Language agnostic base type for transformers that are trying to replace type identifiers used
                 - as name identifiers 
                 - as generic name identifiers
                 - as member access from a type (static etc)
             with new type.
            
             Algorithm:
                 - if simple identifier was used, we just add a using statement needed for new type identifier,
                   getting it from new full type.
                 - if fully qualified identifier was used (old type was used with namespace), we replace it with full
                   qualified name for new type and also add a using statement for the new type's namespace.
            
             Note: we are not using Simplifier since it is not stable and very often fails simplify fully qualified
             names and does not add using statements because of timings (that's why we add usings explicitly ourselves).    
             </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Transformers.IdentifierTransformerBase.GetNewFullTypeNameAsync(Microsoft.UpgradeAssistant.Operations.OperationContext,Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)">
            <summary>
            Returns new full type name for given not if available.
            </summary>
            <param name="context"></param>
            <param name="sourceSemanticModel"></param>
            <param name="sourceRoot"></param>
            <param name="targetSemanticModel"></param>
            <param name="syntaxNode"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.ISyntaxNodeActions">
            <summary>
            Abstraction for common language specific syntax node actions. Allows to reduce number of
            transformer implementations for each language and is reusable across all language specific transformers.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.MemberMapTransformerBase">
             <summary>
             Language agnostic base type for transformers that are trying to replace member invocations or property calls.
            
             Note: this transformer should be called before type identifiers or namespaces transformations usually since
             it uses maps from-to and it is easier to define such maps using old type+member as a key and new type+member
             as a value.
             </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.NamespaceMapTransformerBase">
             <summary>
             Language agnostic base type for transformers that are trying to replace namespaces.
            
             Note: this transformer should be called after type identifiers or member transformations usually
             since some of them need to check existing (old) namespaces in some cases.
             </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Transformers.NamespaceMapTransformerBase.GetApplicableNodes(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Should return identifier name nodes for corresponding language.
            </summary>
            <param name="root"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.QualifiedNameBuilder">
            <summary>
            Use this utility to build a QualifiedName from a string.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Transformers.QualifiedNameBuilder.BuildQualifiedNameSyntax(Microsoft.CodeAnalysis.Editing.SyntaxGenerator,System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Use this utility to build a QualifiedName from a string.
            </summary>
            <param name="generator">Call SyntaxGenerator.GetGenerator(document) to get a generator that builds this syntax in a language agnostic way.</param>
            <param name="qualifiedName">The string representing qualified syntax (e.g. Microsoft.AspNetCore.Mvc.Controller).</param>
            <returns>A QualifiedSyntaxNode. An IdentifierNameSyntax is returned when there is no concept of "left" and "right" nodes.</returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Transformers.QualifiedNameBuilder.BuildMemberAccessExpression(Microsoft.CodeAnalysis.Editing.SyntaxGenerator,System.String)">
            <summary>
            Use this utility to build a MemberAccessExpression from a string.
            </summary>
            <param name="generator">Call SyntaxGenerator.GetGenerator(document) to get a generator that builds this syntax in a language agnostic way.</param>
            <param name="qualifiedName">The string representing a member access expression (e.g. Microsoft.AspNetCore.Mvc.Controller).</param>
            <returns>A MemberAccessExpressionSyntaxNode. An IdentifierNameSyntax is returned when there is no concept of "left" and "right" nodes.</returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.RoslynSyntaxEditor">
            <summary>
            An editor for making changes to a syntax tree. 
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Transformers.RoslynSyntaxEditor.#ctor(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Document)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Editing.SyntaxEditor"/> instance.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Transformers.RoslynSyntaxEditor.OriginalRoot">
            <summary>
            The <see cref="T:Microsoft.CodeAnalysis.SyntaxNode"/> that was specified when the <see cref="T:Microsoft.CodeAnalysis.Editing.SyntaxEditor"/> was constructed.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Transformers.RoslynSyntaxEditor.Generator">
            <summary>
            A <see cref="T:Microsoft.CodeAnalysis.Editing.SyntaxGenerator"/> to use to create and change <see cref="T:Microsoft.CodeAnalysis.SyntaxNode"/>'s.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Transformers.RoslynSyntaxEditor.GetChangedRoot">
            <summary>
            Returns the changed root node.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Transformers.RoslynSyntaxEditor.TrackNode(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Makes sure the node is tracked, even if it is not changed.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Transformers.RoslynSyntaxEditor.RemoveNode(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Remove the node from the tree.
            </summary>
            <param name="node">The node to remove that currently exists as part of the tree.</param>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Transformers.RoslynSyntaxEditor.RemoveNode(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxRemoveOptions)">
            <summary>
            Remove the node from the tree.
            </summary>
            <param name="node">The node to remove that currently exists as part of the tree.</param>
            <param name="options">Options that affect how node removal works.</param>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Transformers.RoslynSyntaxEditor.ReplaceNode(Microsoft.CodeAnalysis.SyntaxNode,System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Editing.SyntaxGenerator,Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Replace the specified node with a node produced by the function.
            </summary>
            <param name="node">The node to replace that already exists in the tree.</param>
            <param name="computeReplacement">A function that computes a replacement node. 
            The node passed into the compute function includes changes from prior edits. It will not appear as a descendant of the original root.</param>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Transformers.RoslynSyntaxEditor.ReplaceNode(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Replace the specified node with a different node.
            </summary>
            <param name="node">The node to replace that already exists in the tree.</param>
            <param name="newNode">The new node that will be placed into the tree in the existing node's location.</param>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Transformers.RoslynSyntaxEditor.InsertBefore(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Insert the new nodes before the specified node already existing in the tree.
            </summary>
            <param name="node">The node already existing in the tree that the new nodes will be placed before. This must be a node this is contained within a syntax list.</param>
            <param name="newNodes">The nodes to place before the existing node. These nodes must be of a compatible type to be placed in the same list containing the existing node.</param>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Transformers.RoslynSyntaxEditor.InsertBefore(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Insert the new node before the specified node already existing in the tree.
            </summary>
            <param name="node">The node already existing in the tree that the new nodes will be placed before. This must be a node this is contained within a syntax list.</param>
            <param name="newNode">The node to place before the existing node. This node must be of a compatible type to be placed in the same list containing the existing node.</param>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Transformers.RoslynSyntaxEditor.InsertAfter(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            Insert the new nodes after the specified node already existing in the tree.
            </summary>
            <param name="node">The node already existing in the tree that the new nodes will be placed after. This must be a node this is contained within a syntax list.</param>
            <param name="newNodes">The nodes to place after the existing node. These nodes must be of a compatible type to be placed in the same list containing the existing node.</param>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Transformers.RoslynSyntaxEditor.InsertAfter(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Insert the new node after the specified node already existing in the tree.
            </summary>
            <param name="node">The node already existing in the tree that the new nodes will be placed after. This must be a node this is contained within a syntax list.</param>
            <param name="newNode">The node to place after the existing node. This node must be of a compatible type to be placed in the same list containing the existing node.</param>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.RoslynDocumentEditor">
            <summary>
            An editor for making changes to a document's syntax tree. 
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Transformers.RoslynDocumentEditor.CreateAsync(Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken)">
            <summary>
            Creates a new <see cref="T:Microsoft.UpgradeAssistant.Transformers.RoslynDocumentEditor"/> instance.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Transformers.RoslynDocumentEditor.OriginalDocument">
            <summary>
            The <see cref="T:Microsoft.CodeAnalysis.Document"/> specified when the editor was first created.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Transformers.RoslynDocumentEditor.SemanticModel">
            <summary>
            The <see cref="T:Microsoft.CodeAnalysis.SemanticModel"/> of the original document.
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Transformers.RoslynDocumentEditor.GetChangedDocument">
            <summary>
            Returns the changed <see cref="T:Microsoft.CodeAnalysis.Document"/>.
            </summary>
        </member>
        <member name="F:Microsoft.UpgradeAssistant.Transformers.TransformerCodeFixProvider.CodeFixTitle">
            <summary>
            Use this key to specify a custom code fix title in the diagnostic properties.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.TypeMapTransformerBase">
            <summary>
            Language agnostic base class for transformers that can update types in a batch based
            on a typemap files (from embedded resources or user provided files).
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.TypeMapUsingsTransformerBase">
            <summary>
            Language agnostic base class for transformers that can update types in a batch based
            on a typemap files (from embedded resources or user provided files).
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.CopyFilesTransformer">
            <summary>
            Copies all project components that are files or can be in files.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.ISliceNodeTransformer">
            <summary>
            Smallest unit of work dedicated to apply a particular transformation on a given <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/>.
            It is discovered based on <see cref="T:Microsoft.UpgradeAssistant.Transformers.SliceNodeTransformerAttribute"/> and is lazily loaded for specified
            node kinds and operations. 
            </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Transformers.ISliceNodeTransformer.RunAsync(Microsoft.UpgradeAssistant.Operations.OperationContext,Microsoft.UpgradeAssistant.SliceNode,System.Threading.CancellationToken)">
            <summary>
            Applies transformation on the given <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/>.
            </summary>
            <param name="context"></param>
            <param name="node"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.Operation.Initializers.CreateTargetProjectTransformer">
            <summary>
            Creates new project for side-by-side operation where user chose to create a
            new project and add it to context properties for next transformers to access
            through <see cref="P:Microsoft.UpgradeAssistant.Operations.SideBySideOperationContext.TargetProject"/> property.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.AspNetCoreAllPackageReferenceTransformer">
            <summary>
            Removes Microsoft.AspNetCore.All or replaces with FrameworkReference.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.InplacePackageReferenceTransformer">
            <summary>
            If package is already in the project and is supported, skips. Otherwise, tries to find and add
            latest supported by the project package version (for all target frameworks). If not, removes the package.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.MultitargetInplacePackageReferenceTransformer">
            <summary>
            If package is already in the project and is supported, skips. Otherwise, tries to find and add
            latest supported by the project package version (for all target frameworks). If not, removes the package.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.PackageMapTransformerBase">
             <summary>
             If <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/> is a package node, tries to find corresponding replacement
             for new project's target framework. If replacement(s) found, adds it if the project
             does not yet have a package(s) with that name.
            
             If replacement is not found skips.
            
             If package map contains empty replacement list, removes old package from the project.
             </summary>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Transformers.PackageMapTransformerBase.RemovePackageIfNoReplacements(Microsoft.UpgradeAssistant.Operations.OperationContext,System.Collections.Generic.IEnumerable{System.String},Microsoft.UpgradeAssistant.Packages.PackageMapEntry,Microsoft.UpgradeAssistant.Nodes.PackageReferenceSliceNode,Microsoft.UpgradeAssistant.Services.ILogger,System.Threading.CancellationToken)">
            <summary>
            Checks if there are any package replacements for the given the package node and its package map entry.
            If not, removes the package from the project.
            </summary>
            <returns>
            (null, null) if the package was removed. Otherwise, returns the target frameworks and the corresponding package replacements.
            </returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Transformers.PackageMapTransformerBase.GetPackageVersionCoreAsync(Microsoft.UpgradeAssistant.Operations.OperationContext,System.String,Microsoft.UpgradeAssistant.Packages.FrameworkPackageMapEntry,System.Collections.Generic.IEnumerable{System.String},Microsoft.UpgradeAssistant.Services.ILogger,System.Threading.CancellationToken)">
            <summary>
             Resolves the package version that supports given set of target frameworks.
            </summary>
            <param name="context"></param>
            <param name="packageName">The package name to search for.</param>
            <param name="packageMapEntry"></param>
            <param name="targetFrameworks">The target frameworks the package is compatible with.</param>
            <param name="logger">The logger.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The resolved package version or <see langword="null"/>, if the resolution failed.</returns>
        </member>
        <member name="M:Microsoft.UpgradeAssistant.Transformers.PackageMapTransformerBase.GetPackageVersionAsync(Microsoft.UpgradeAssistant.Operations.OperationContext,System.String,Microsoft.UpgradeAssistant.Packages.FrameworkPackageMapEntry,System.Collections.Generic.IEnumerable{System.String},Microsoft.UpgradeAssistant.Services.ILogger,System.Threading.CancellationToken)">
            <summary>
             Resolves the package version that supports given set of target frameworks.
            </summary>
            <param name="context"></param>
            <param name="packageName">The package name to search for.</param>
            <param name="packageMapEntry"></param>
            <param name="targetFrameworks">The target frameworks the package is compatible with.</param>
            <param name="logger">The logger.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The resolved package version or <see langword="null"/>, if the resolution failed.</returns>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.PrecomputedPackageReferenceTransformer">
            <summary>
            If we already got precomputed set of package versions - apply them to the project.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.SideBySidePackageReferenceTransformer">
            <summary>
            If current package version is supported, adds it to tha target project.
            
            If current package version is not supported, installs latest package version to the target project
            and checks if the latest version is supports target project target framework. If no, removes package
            from the target project.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.DefaultProjectFilesRemoveTransformer">
            <summary>
            Removes old packages config file.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.ProjectFilesRemoveTransformerBase">
            <summary>
            Removes unnecessary files from the project that is being upgraded.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.ProjectFilesRenameTransformerBase">
            <summary>
            Renames files in the project that is being upgraded.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.ProjectPropertiesRemoveTransformerBase">
            <summary>
            Removes specified properties from the project that is being upgraded.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.ProjectPropertiesSetTransformerBase">
            <summary>
            Sets specified properties in the project that is being upgraded.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.ProjectReferenceSideBySideTransformer">
            <summary>
            If <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/> is a project node, this transformer tries to check if target frameworks
            are compatible for original and new core project. If they are, it adds a project reference to the
            new core project (if it does not exist). If target frameworks are incompatible, then it prints out
            a warning suggesting to use Upgrade Assistant and migrate project reference in-place for now.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.ProjectSdkStyleTransformer">
            <summary>
            Tries to convert project to SDK-style project specified in the context and optionally creates new side-by-side converted project.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.ProjectSdkStyleTransformerBase">
            <summary>
            Tries to convert project to SDK-style in-place.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.SolutionProjectTypeTransformer">
            <summary>
            Changes project flavor GUID in the solution file.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.SliceNodeTransformerAttribute">
            <summary>
            Attribute that is applicable for implementations of <see cref="T:Microsoft.UpgradeAssistant.Transformers.ISliceNodeTransformer"/> and
            specifies when and how the transformer should be applied.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Transformers.SliceNodeTransformerAttribute.Id">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Transformers.SliceNodeTransformerAttribute.Traits">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Transformers.SliceNodeTransformerAttribute.NodeKind">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Transformers.SliceNodeTransformerAttribute.Language">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Transformers.SliceNodeTransformerAttribute.Order">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Transformers.SliceNodeTransformerAttribute.Retry">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Transformers.ISliceNodeTransformerMetadata.Id">
            <summary>
            Unique ID of the transformer to be used in telemetry.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Transformers.ISliceNodeTransformerMetadata.Traits">
            <summary>
            A capabilities expression to use when decision is made to use the transformer or not for current project context.
            When null, applied for all projects.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Transformers.ISliceNodeTransformerMetadata.NodeKind">
            <summary>
            Specifies a kind of <see cref="T:Microsoft.UpgradeAssistant.SliceNode"/> for which this transformer is applicable.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Transformers.ISliceNodeTransformerMetadata.Order">
            <summary>
            For each node a set of transformers that can modify it will be selected, then each of those
            transformers would be ordered according to the order specified here. We have int instead of
            relational ordering like OrderBefore or OrderAfter to start with and can switch to relational
            if we find any conflicting scenarios. For now if transformer is authored correctly, there are
            some predefined orders for particular transformation flavors like file copy, nuget, code etc.
            Authors should apply their order value based on those constants. It is kind of obvious that
            code transformer should not come before file copy and it is pretty
            clear in <see cref="T:Microsoft.UpgradeAssistant.Metadata.TransformersOrder"/>.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Transformers.ISliceNodeTransformerMetadata.Language">
            <summary>
            Any supported project language, for now we have only C# and VB.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Transformers.ISliceNodeTransformerMetadata.Retry">
            <summary>
            If true, this transformer will be retried of it returned failure result.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.SliceNodeTransformerResult">
            <summary>
            Result returned by <see cref="T:Microsoft.UpgradeAssistant.Transformers.ISliceNodeTransformer"/>.
            </summary>
        </member>
        <member name="T:Microsoft.UpgradeAssistant.Transformers.SliceNodeTransformerWithCodeFixAttribute">
            <summary>
            Attribute that is applicable for implementations of <see cref="T:Microsoft.UpgradeAssistant.Transformers.ISliceNodeTransformer"/> and
            <see cref="T:Microsoft.UpgradeAssistant.Transformers.ICodeFixTransformer"/>. It specifies when and how the transformer should be applied and
            what diagnostic ID the transformer can handle.
            Create a <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/> to report diagnostics that can be fixed by this transformer.
            </summary>
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Transformers.SliceNodeTransformerWithCodeFixAttribute.DiagnosticId">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.UpgradeAssistant.Transformers.ISliceNodeTransformerWithCodeFixMetadata.DiagnosticId">
            <summary>
            Diagnostic ID that the transformer can fix.
            </summary>
        </member>
    </members>
</doc>
